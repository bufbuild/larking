// Copyright 2023 Edward McFarlane. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/library.proto

package librarypbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	librarypb "larking.io/benchmarks/api/librarypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LibraryServiceName is the fully-qualified name of the LibraryService service.
	LibraryServiceName = "larking.benchmarks.librarypb.LibraryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibraryServiceGetBookProcedure is the fully-qualified name of the LibraryService's GetBook RPC.
	LibraryServiceGetBookProcedure = "/larking.benchmarks.librarypb.LibraryService/GetBook"
	// LibraryServiceCreateBookProcedure is the fully-qualified name of the LibraryService's CreateBook
	// RPC.
	LibraryServiceCreateBookProcedure = "/larking.benchmarks.librarypb.LibraryService/CreateBook"
	// LibraryServiceListBooksProcedure is the fully-qualified name of the LibraryService's ListBooks
	// RPC.
	LibraryServiceListBooksProcedure = "/larking.benchmarks.librarypb.LibraryService/ListBooks"
	// LibraryServiceUpdateBookProcedure is the fully-qualified name of the LibraryService's UpdateBook
	// RPC.
	LibraryServiceUpdateBookProcedure = "/larking.benchmarks.librarypb.LibraryService/UpdateBook"
	// LibraryServiceDeleteBookProcedure is the fully-qualified name of the LibraryService's DeleteBook
	// RPC.
	LibraryServiceDeleteBookProcedure = "/larking.benchmarks.librarypb.LibraryService/DeleteBook"
)

// LibraryServiceClient is a client for the larking.benchmarks.librarypb.LibraryService service.
type LibraryServiceClient interface {
	GetBook(context.Context, *connect_go.Request[librarypb.GetBookRequest]) (*connect_go.Response[librarypb.Book], error)
	CreateBook(context.Context, *connect_go.Request[librarypb.CreateBookRequest]) (*connect_go.Response[librarypb.Book], error)
	// Lists books in a shelf.
	ListBooks(context.Context, *connect_go.Request[librarypb.ListBooksRequest]) (*connect_go.Response[librarypb.ListBooksResponse], error)
	// Updates a book.
	UpdateBook(context.Context, *connect_go.Request[librarypb.UpdateBookRequest]) (*connect_go.Response[librarypb.Book], error)
	// Deletes a book.
	DeleteBook(context.Context, *connect_go.Request[librarypb.DeleteBookRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewLibraryServiceClient constructs a client for the larking.benchmarks.librarypb.LibraryService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibraryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LibraryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &libraryServiceClient{
		getBook: connect_go.NewClient[librarypb.GetBookRequest, librarypb.Book](
			httpClient,
			baseURL+LibraryServiceGetBookProcedure,
			opts...,
		),
		createBook: connect_go.NewClient[librarypb.CreateBookRequest, librarypb.Book](
			httpClient,
			baseURL+LibraryServiceCreateBookProcedure,
			opts...,
		),
		listBooks: connect_go.NewClient[librarypb.ListBooksRequest, librarypb.ListBooksResponse](
			httpClient,
			baseURL+LibraryServiceListBooksProcedure,
			opts...,
		),
		updateBook: connect_go.NewClient[librarypb.UpdateBookRequest, librarypb.Book](
			httpClient,
			baseURL+LibraryServiceUpdateBookProcedure,
			opts...,
		),
		deleteBook: connect_go.NewClient[librarypb.DeleteBookRequest, emptypb.Empty](
			httpClient,
			baseURL+LibraryServiceDeleteBookProcedure,
			opts...,
		),
	}
}

// libraryServiceClient implements LibraryServiceClient.
type libraryServiceClient struct {
	getBook    *connect_go.Client[librarypb.GetBookRequest, librarypb.Book]
	createBook *connect_go.Client[librarypb.CreateBookRequest, librarypb.Book]
	listBooks  *connect_go.Client[librarypb.ListBooksRequest, librarypb.ListBooksResponse]
	updateBook *connect_go.Client[librarypb.UpdateBookRequest, librarypb.Book]
	deleteBook *connect_go.Client[librarypb.DeleteBookRequest, emptypb.Empty]
}

// GetBook calls larking.benchmarks.librarypb.LibraryService.GetBook.
func (c *libraryServiceClient) GetBook(ctx context.Context, req *connect_go.Request[librarypb.GetBookRequest]) (*connect_go.Response[librarypb.Book], error) {
	return c.getBook.CallUnary(ctx, req)
}

// CreateBook calls larking.benchmarks.librarypb.LibraryService.CreateBook.
func (c *libraryServiceClient) CreateBook(ctx context.Context, req *connect_go.Request[librarypb.CreateBookRequest]) (*connect_go.Response[librarypb.Book], error) {
	return c.createBook.CallUnary(ctx, req)
}

// ListBooks calls larking.benchmarks.librarypb.LibraryService.ListBooks.
func (c *libraryServiceClient) ListBooks(ctx context.Context, req *connect_go.Request[librarypb.ListBooksRequest]) (*connect_go.Response[librarypb.ListBooksResponse], error) {
	return c.listBooks.CallUnary(ctx, req)
}

// UpdateBook calls larking.benchmarks.librarypb.LibraryService.UpdateBook.
func (c *libraryServiceClient) UpdateBook(ctx context.Context, req *connect_go.Request[librarypb.UpdateBookRequest]) (*connect_go.Response[librarypb.Book], error) {
	return c.updateBook.CallUnary(ctx, req)
}

// DeleteBook calls larking.benchmarks.librarypb.LibraryService.DeleteBook.
func (c *libraryServiceClient) DeleteBook(ctx context.Context, req *connect_go.Request[librarypb.DeleteBookRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteBook.CallUnary(ctx, req)
}

// LibraryServiceHandler is an implementation of the larking.benchmarks.librarypb.LibraryService
// service.
type LibraryServiceHandler interface {
	GetBook(context.Context, *connect_go.Request[librarypb.GetBookRequest]) (*connect_go.Response[librarypb.Book], error)
	CreateBook(context.Context, *connect_go.Request[librarypb.CreateBookRequest]) (*connect_go.Response[librarypb.Book], error)
	// Lists books in a shelf.
	ListBooks(context.Context, *connect_go.Request[librarypb.ListBooksRequest]) (*connect_go.Response[librarypb.ListBooksResponse], error)
	// Updates a book.
	UpdateBook(context.Context, *connect_go.Request[librarypb.UpdateBookRequest]) (*connect_go.Response[librarypb.Book], error)
	// Deletes a book.
	DeleteBook(context.Context, *connect_go.Request[librarypb.DeleteBookRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewLibraryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibraryServiceHandler(svc LibraryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(LibraryServiceGetBookProcedure, connect_go.NewUnaryHandler(
		LibraryServiceGetBookProcedure,
		svc.GetBook,
		opts...,
	))
	mux.Handle(LibraryServiceCreateBookProcedure, connect_go.NewUnaryHandler(
		LibraryServiceCreateBookProcedure,
		svc.CreateBook,
		opts...,
	))
	mux.Handle(LibraryServiceListBooksProcedure, connect_go.NewUnaryHandler(
		LibraryServiceListBooksProcedure,
		svc.ListBooks,
		opts...,
	))
	mux.Handle(LibraryServiceUpdateBookProcedure, connect_go.NewUnaryHandler(
		LibraryServiceUpdateBookProcedure,
		svc.UpdateBook,
		opts...,
	))
	mux.Handle(LibraryServiceDeleteBookProcedure, connect_go.NewUnaryHandler(
		LibraryServiceDeleteBookProcedure,
		svc.DeleteBook,
		opts...,
	))
	return "/larking.benchmarks.librarypb.LibraryService/", mux
}

// UnimplementedLibraryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibraryServiceHandler struct{}

func (UnimplementedLibraryServiceHandler) GetBook(context.Context, *connect_go.Request[librarypb.GetBookRequest]) (*connect_go.Response[librarypb.Book], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("larking.benchmarks.librarypb.LibraryService.GetBook is not implemented"))
}

func (UnimplementedLibraryServiceHandler) CreateBook(context.Context, *connect_go.Request[librarypb.CreateBookRequest]) (*connect_go.Response[librarypb.Book], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("larking.benchmarks.librarypb.LibraryService.CreateBook is not implemented"))
}

func (UnimplementedLibraryServiceHandler) ListBooks(context.Context, *connect_go.Request[librarypb.ListBooksRequest]) (*connect_go.Response[librarypb.ListBooksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("larking.benchmarks.librarypb.LibraryService.ListBooks is not implemented"))
}

func (UnimplementedLibraryServiceHandler) UpdateBook(context.Context, *connect_go.Request[librarypb.UpdateBookRequest]) (*connect_go.Response[librarypb.Book], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("larking.benchmarks.librarypb.LibraryService.UpdateBook is not implemented"))
}

func (UnimplementedLibraryServiceHandler) DeleteBook(context.Context, *connect_go.Request[librarypb.DeleteBookRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("larking.benchmarks.librarypb.LibraryService.DeleteBook is not implemented"))
}
