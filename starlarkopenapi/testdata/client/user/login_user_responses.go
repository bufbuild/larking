// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LoginUserReader is a Reader for the LoginUser structure.
type LoginUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLoginUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLoginUserOK creates a LoginUserOK with default headers values
func NewLoginUserOK() *LoginUserOK {
	return &LoginUserOK{}
}

/* LoginUserOK describes a response with status code 200, with default header values.

successful operation
*/
type LoginUserOK struct {

	/* date in UTC when token expires

	   Format: date-time
	*/
	XExpiresAfter strfmt.DateTime

	/* calls per hour allowed by the user

	   Format: int32
	*/
	XRateLimit int32

	Payload string
}

func (o *LoginUserOK) Error() string {
	return fmt.Sprintf("[GET /user/login][%d] loginUserOK  %+v", 200, o.Payload)
}
func (o *LoginUserOK) GetPayload() string {
	return o.Payload
}

func (o *LoginUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Expires-After
	hdrXExpiresAfter := response.GetHeader("X-Expires-After")

	if hdrXExpiresAfter != "" {
		valxExpiresAfter, err := formats.Parse("date-time", hdrXExpiresAfter)
		if err != nil {
			return errors.InvalidType("X-Expires-After", "header", "strfmt.DateTime", hdrXExpiresAfter)
		}
		o.XExpiresAfter = *(valxExpiresAfter.(*strfmt.DateTime))
	}

	// hydrates response header X-Rate-Limit
	hdrXRateLimit := response.GetHeader("X-Rate-Limit")

	if hdrXRateLimit != "" {
		valxRateLimit, err := swag.ConvertInt32(hdrXRateLimit)
		if err != nil {
			return errors.InvalidType("X-Rate-Limit", "header", "int32", hdrXRateLimit)
		}
		o.XRateLimit = valxRateLimit
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginUserBadRequest creates a LoginUserBadRequest with default headers values
func NewLoginUserBadRequest() *LoginUserBadRequest {
	return &LoginUserBadRequest{}
}

/* LoginUserBadRequest describes a response with status code 400, with default header values.

Invalid username/password supplied
*/
type LoginUserBadRequest struct {
}

func (o *LoginUserBadRequest) Error() string {
	return fmt.Sprintf("[GET /user/login][%d] loginUserBadRequest ", 400)
}

func (o *LoginUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
