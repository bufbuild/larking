// Code generated by go-swagger; DO NOT EDIT.

package pet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFindPetsByTagsParams creates a new FindPetsByTagsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindPetsByTagsParams() *FindPetsByTagsParams {
	return &FindPetsByTagsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindPetsByTagsParamsWithTimeout creates a new FindPetsByTagsParams object
// with the ability to set a timeout on a request.
func NewFindPetsByTagsParamsWithTimeout(timeout time.Duration) *FindPetsByTagsParams {
	return &FindPetsByTagsParams{
		timeout: timeout,
	}
}

// NewFindPetsByTagsParamsWithContext creates a new FindPetsByTagsParams object
// with the ability to set a context for a request.
func NewFindPetsByTagsParamsWithContext(ctx context.Context) *FindPetsByTagsParams {
	return &FindPetsByTagsParams{
		Context: ctx,
	}
}

// NewFindPetsByTagsParamsWithHTTPClient creates a new FindPetsByTagsParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindPetsByTagsParamsWithHTTPClient(client *http.Client) *FindPetsByTagsParams {
	return &FindPetsByTagsParams{
		HTTPClient: client,
	}
}

/* FindPetsByTagsParams contains all the parameters to send to the API endpoint
   for the find pets by tags operation.

   Typically these are written to a http.Request.
*/
type FindPetsByTagsParams struct {

	/* Tags.

	   Tags to filter by
	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find pets by tags params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindPetsByTagsParams) WithDefaults() *FindPetsByTagsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find pets by tags params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindPetsByTagsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find pets by tags params
func (o *FindPetsByTagsParams) WithTimeout(timeout time.Duration) *FindPetsByTagsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find pets by tags params
func (o *FindPetsByTagsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find pets by tags params
func (o *FindPetsByTagsParams) WithContext(ctx context.Context) *FindPetsByTagsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find pets by tags params
func (o *FindPetsByTagsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find pets by tags params
func (o *FindPetsByTagsParams) WithHTTPClient(client *http.Client) *FindPetsByTagsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find pets by tags params
func (o *FindPetsByTagsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTags adds the tags to the find pets by tags params
func (o *FindPetsByTagsParams) WithTags(tags []string) *FindPetsByTagsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the find pets by tags params
func (o *FindPetsByTagsParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *FindPetsByTagsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Tags != nil {

		// binding items for tags
		joinedTags := o.bindParamTags(reg)

		// query array param tags
		if err := r.SetQueryParam("tags", joinedTags...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFindPetsByTags binds the parameter tags
func (o *FindPetsByTagsParams) bindParamTags(formats strfmt.Registry) []string {
	tagsIR := o.Tags

	var tagsIC []string
	for _, tagsIIR := range tagsIR { // explode []string

		tagsIIV := tagsIIR // string as string
		tagsIC = append(tagsIC, tagsIIV)
	}

	// items.CollectionFormat: "multi"
	tagsIS := swag.JoinByFormat(tagsIC, "multi")

	return tagsIS
}
