// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/hellostream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamingGreeter_SayHelloStreaming_FullMethodName = "/hellostream.StreamingGreeter/SayHelloStreaming"
)

// StreamingGreeterClient is the client API for StreamingGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingGreeterClient interface {
	// Streams a many greetings
	SayHelloStreaming(ctx context.Context, opts ...grpc.CallOption) (StreamingGreeter_SayHelloStreamingClient, error)
}

type streamingGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingGreeterClient(cc grpc.ClientConnInterface) StreamingGreeterClient {
	return &streamingGreeterClient{cc}
}

func (c *streamingGreeterClient) SayHelloStreaming(ctx context.Context, opts ...grpc.CallOption) (StreamingGreeter_SayHelloStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingGreeter_ServiceDesc.Streams[0], StreamingGreeter_SayHelloStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingGreeterSayHelloStreamingClient{stream}
	return x, nil
}

type StreamingGreeter_SayHelloStreamingClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type streamingGreeterSayHelloStreamingClient struct {
	grpc.ClientStream
}

func (x *streamingGreeterSayHelloStreamingClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingGreeterSayHelloStreamingClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingGreeterServer is the server API for StreamingGreeter service.
// All implementations must embed UnimplementedStreamingGreeterServer
// for forward compatibility
type StreamingGreeterServer interface {
	// Streams a many greetings
	SayHelloStreaming(StreamingGreeter_SayHelloStreamingServer) error
	mustEmbedUnimplementedStreamingGreeterServer()
}

// UnimplementedStreamingGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingGreeterServer struct {
}

func (UnimplementedStreamingGreeterServer) SayHelloStreaming(StreamingGreeter_SayHelloStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStreaming not implemented")
}
func (UnimplementedStreamingGreeterServer) mustEmbedUnimplementedStreamingGreeterServer() {}

// UnsafeStreamingGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingGreeterServer will
// result in compilation errors.
type UnsafeStreamingGreeterServer interface {
	mustEmbedUnimplementedStreamingGreeterServer()
}

func RegisterStreamingGreeterServer(s grpc.ServiceRegistrar, srv StreamingGreeterServer) {
	s.RegisterService(&StreamingGreeter_ServiceDesc, srv)
}

func _StreamingGreeter_SayHelloStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingGreeterServer).SayHelloStreaming(&streamingGreeterSayHelloStreamingServer{stream})
}

type StreamingGreeter_SayHelloStreamingServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type streamingGreeterSayHelloStreamingServer struct {
	grpc.ServerStream
}

func (x *streamingGreeterSayHelloStreamingServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingGreeterSayHelloStreamingServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingGreeter_ServiceDesc is the grpc.ServiceDesc for StreamingGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hellostream.StreamingGreeter",
	HandlerType: (*StreamingGreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStreaming",
			Handler:       _StreamingGreeter_SayHelloStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/hellostream.proto",
}
