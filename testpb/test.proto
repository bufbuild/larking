// Copyright 2021 Edward McFarlane. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package larking.testpb;

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "larking.io/testpb;testpb";

service Messaging {
  // HTTP | gRPC
  // -----|-----
  // `GET /v1/messages/123456`  | `GetMessageOne(name: "messages/123456")`
  rpc GetMessageOne(GetMessageRequestOne) returns (Message) {
    option (google.api.http) = {
      get : "/v1/messages/{name=name/*}"
    };
  }

  // HTTP | gRPC
  // -----|-----
  // `GET /v1/messages/123456?revision=2&sub.subfield=foo` |
  // `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield:
  // "foo"))`
  // `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id:
  // "123456")`
  rpc GetMessageTwo(GetMessageRequestTwo) returns (Message) {
    option (google.api.http) = {
      get : "/v1/messages/{message_id}"
      additional_bindings {get : "/v1/users/{user_id}/messages"}
      additional_bindings {get : "/v1/users/{user_id}/messages/{message_id}"}
    };
  }

  // HTTP | gRPC
  // -----|-----
  // `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:
  // "123456" message { text: "Hi!" })`
  rpc UpdateMessage(UpdateMessageRequestOne) returns (Message) {
    option (google.api.http) = {
      patch : "/v1/messages/{message_id}"
      body : "message"
    };
  }

  // HTTP | gRPC
  // -----|-----
  // `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:
  // "123456" text: "Hi!")`
  rpc UpdateMessageBody(Message) returns (Message) {
    option (google.api.http) = {
      patch : "/v1/messages/{message_id}/body"
      body : "*"
    };
  }

  rpc Action(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/{text=action}:cancel"
      body : "*"
    };
  }

  rpc ActionSegment(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/{text=*}:clear"
      body : "*"
    };
  }

  rpc ActionResource(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/{text=actions/*}:fetch"
    };
  }

  rpc ActionSegments(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/{text=**}:watch"
      body : "*"
    };
  }

  rpc BatchGet(google.protobuf.Empty) returns (google.protobuf.Empty) {
    // The batch get method maps to HTTP GET verb.
    option (google.api.http) = {
      get : "/v3/events:batchGet"
    };
  }

  rpc VariableOne(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/{text}/one"
    };
  }
  rpc VariableTwo(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/{text}/two"
    };
  }

  rpc GetShelf(GetShelfRequest) returns (Shelf) {
    option (google.api.http) = {
      get : "/v1/{name=shelves/*}"
    };
  };
  rpc GetBook(GetBookRequest) returns (Book) {
    option (google.api.http) = {
      get : "/v1/{name=shelves/*/books/*}"
    };
  };
  rpc CreateBook(CreateBookRequest) returns (Book) {
    option (google.api.http) = {
      post : "/v1/{parent=shelves/*}/books"
      body : "book"
    };
  };
  rpc UpdateBook(UpdateBookRequest) returns (Book) {
    // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
    // Resource is contained in the HTTP request body.
    option (google.api.http) = {
      // Note the URL template variable which captures the resource name of the
      // book to update.
      patch : "/v1/{book.name=shelves/*/books/*}"
      body : "book"
    };
  }
}

message Message {
  string message_id = 1;
  string text = 2; // The resource content
  string user_id = 3;
}
message GetMessageRequestOne {
  string name = 1; // Mapped to URL path
}
message GetMessageRequestTwo {
  message SubMessage { string subfield = 1; }
  string message_id = 1; // Mapped to URL path
  int64 revision = 2;    // Mapped to URL query parameter `revision`
  SubMessage sub = 3;    // Mapped to URL query parameter `sub.subfield`
  string user_id = 4;    // Additional binding
}
message UpdateMessageRequestOne {
  string message_id = 1; // Mapped to the URL
  Message message = 2;   // Mapped to the body
}

service Files {
  // HTTP | gRPC
  // -----|-----
  // `POST /files/cat.jpg <body>` | `UploadDownload(filename: "cat.jpg", file:
  // { content_type: "image/jpeg", data: <body>})"`
  rpc UploadDownload(UploadFileRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      post : "/files/{filename}"
      body : "file"
    };
  }
  rpc LargeUploadDownload(stream UploadFileRequest)
      returns (stream google.api.HttpBody) {
    option (google.api.http) = {
      post : "/files/large/{filename}"
      body : "file"
    };
  }
}
message UploadFileRequest {
  string filename = 1;
  google.api.HttpBody file = 2;
}

// Valid a-z A-Z 0-9 . - _ ~ ! $ & ' ( ) * + , ; = : @
service WellKnown {
  // HTTP | gRPC
  // -----|-----
  // `GET /v1/wellknown/timestamp/2017-01-15T01:30:15.01Z` |
  // `Check(Timestamp{...})`
  rpc Check(Scalars) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/wellknown"
    };
  }
}

message Scalars {
  google.protobuf.Timestamp timestamp = 1;
  google.protobuf.Duration duration = 2;
  google.protobuf.BoolValue bool_value = 3;
  google.protobuf.Int32Value int32_value = 4;
  google.protobuf.Int64Value int64_value = 5;
  google.protobuf.UInt32Value uint32_value = 6;
  google.protobuf.UInt64Value uint64_value = 7;
  google.protobuf.FloatValue float_value = 8;
  google.protobuf.DoubleValue double_value = 9;
  google.protobuf.BytesValue bytes_value = 10;
  google.protobuf.StringValue string_value = 11;
  google.protobuf.FieldMask field_mask = 12;
}

message Shelf {
  // Resource name of the shelf. It must have the format of "shelves/*".
  // For example: "shelves/shelf1".
  string name = 1;
}

message GetShelfRequest {
  // Resource name of a shelf. For example: "shelves/shelf1".
  string name = 1;
}

message Book {
  // Resource name of the book. It must have the format of "shelves/*/books/*".
  // For example: "shelves/shelf1/books/book2".
  string name = 1;

  // ... other properties
  string title = 2;
}

message GetBookRequest {
  // Resource name of a book. For example: "shelves/shelf1/books/book2".
  string name = 1;
}

message CreateBookRequest {
  // Resource name of the parent resource where to create the book.
  // For example: "shelves/shelf1".
  string parent = 1;
  // The Book resource to be created. Client must not set the `Book.name` field.
  Book book = 2;
}

message UpdateBookRequest {
  // The book resource which replaces the resource on the server.
  Book book = 1;

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see
  // https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

message ChatMessage {
  string name = 1;
  string text = 2;
}

// Chatroom shows the websocket extension.
service ChatRoom {
  rpc Chat(stream ChatMessage) returns (stream ChatMessage) {
    option (google.api.http) = {
      custom : {kind : "websocket" path : "/v1/{name=rooms/*}"}
      body : "*"
    };
  }
}
