// Copyright 2022 Edward McFarlane. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package larking.api.control;

import "google/api/annotations.proto";
import "google/rpc/status.proto";

option go_package = "larking.io/apipb/controlpb;controlpb";

// Based on google APIs Service Control:
// https://github.com/googleapis/googleapis/blob/master/google/api/servicecontrol/v1/service_controller.proto

message Credentials {
  // The resource name.
  string name = 1;

  // BearerToken is a credential type.
  // Include the access token as metadata in all requests.
  message BearerToken {
    // The access token.
    string access_token = 2;
    // The public key, optional.
    string public_key = 3;
  }

  // Basic is a credential type.
  // Include the username and password in all requests.
  message BasicAuth {
    // The username.
    string username = 1;
    // The password.
    string password = 2;
    // The public key, optional.
    string public_key = 3;
  }

  oneof type {
    bool insecure = 2;
    BearerToken bearer = 3;
    BasicAuth basic = 4;
  }
}

message Values { repeated string values = 1; }

message Operation {
  // The operation name.
  string name = 1;
  // The operation credentials if user initiated.
  Credentials credentials = 2;
}

// Request message for the Check method.
message CheckRequest {
  // The resource name.
  string name = 1;

  // The operation to be checked.
  Operation operation = 2;
}

message CheckResponse { google.rpc.Status status = 1; }

service Control {
  rpc Check(CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      post : "/v1/{name=**}:check"
      body : "*"
    };
  }
}
