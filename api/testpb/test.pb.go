// Copyright 2021 Edward McFarlane. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: larking/api/test.proto

package testpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComplexRequest_Enum int32

const (
	ComplexRequest_ENUM_UNSPECIFIED ComplexRequest_Enum = 0
	ComplexRequest_ENUM_VALUE       ComplexRequest_Enum = 1
)

// Enum value maps for ComplexRequest_Enum.
var (
	ComplexRequest_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_VALUE",
	}
	ComplexRequest_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_VALUE":       1,
	}
)

func (x ComplexRequest_Enum) Enum() *ComplexRequest_Enum {
	p := new(ComplexRequest_Enum)
	*p = x
	return p
}

func (x ComplexRequest_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplexRequest_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_larking_api_test_proto_enumTypes[0].Descriptor()
}

func (ComplexRequest_Enum) Type() protoreflect.EnumType {
	return &file_larking_api_test_proto_enumTypes[0]
}

func (x ComplexRequest_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplexRequest_Enum.Descriptor instead.
func (ComplexRequest_Enum) EnumDescriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{6, 0}
}

type ComplexRequest_Nested_Enum int32

const (
	ComplexRequest_Nested_ENUM_UNSPECIFIED ComplexRequest_Nested_Enum = 0
	ComplexRequest_Nested_ENUM_VALUE       ComplexRequest_Nested_Enum = 1
)

// Enum value maps for ComplexRequest_Nested_Enum.
var (
	ComplexRequest_Nested_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_VALUE",
	}
	ComplexRequest_Nested_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_VALUE":       1,
	}
)

func (x ComplexRequest_Nested_Enum) Enum() *ComplexRequest_Nested_Enum {
	p := new(ComplexRequest_Nested_Enum)
	*p = x
	return p
}

func (x ComplexRequest_Nested_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComplexRequest_Nested_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_larking_api_test_proto_enumTypes[1].Descriptor()
}

func (ComplexRequest_Nested_Enum) Type() protoreflect.EnumType {
	return &file_larking_api_test_proto_enumTypes[1]
}

func (x ComplexRequest_Nested_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComplexRequest_Nested_Enum.Descriptor instead.
func (ComplexRequest_Nested_Enum) EnumDescriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{6, 15, 0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"` // The resource content
	UserId    string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Message) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetMessageRequestOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Mapped to URL path
}

func (x *GetMessageRequestOne) Reset() {
	*x = GetMessageRequestOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageRequestOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageRequestOne) ProtoMessage() {}

func (x *GetMessageRequestOne) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageRequestOne.ProtoReflect.Descriptor instead.
func (*GetMessageRequestOne) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{1}
}

func (x *GetMessageRequestOne) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetMessageRequestTwo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string                           `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // Mapped to URL path
	Revision  int64                            `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`                   // Mapped to URL query parameter `revision`
	Sub       *GetMessageRequestTwo_SubMessage `protobuf:"bytes,3,opt,name=sub,proto3" json:"sub,omitempty"`                              // Mapped to URL query parameter `sub.subfield`
	UserId    string                           `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // Additional binding
}

func (x *GetMessageRequestTwo) Reset() {
	*x = GetMessageRequestTwo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageRequestTwo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageRequestTwo) ProtoMessage() {}

func (x *GetMessageRequestTwo) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageRequestTwo.ProtoReflect.Descriptor instead.
func (*GetMessageRequestTwo) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{2}
}

func (x *GetMessageRequestTwo) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *GetMessageRequestTwo) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *GetMessageRequestTwo) GetSub() *GetMessageRequestTwo_SubMessage {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *GetMessageRequestTwo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UpdateMessageRequestOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string   `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"` // Mapped to the URL
	Message   *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                      // Mapped to the body
}

func (x *UpdateMessageRequestOne) Reset() {
	*x = UpdateMessageRequestOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMessageRequestOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageRequestOne) ProtoMessage() {}

func (x *UpdateMessageRequestOne) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageRequestOne.ProtoReflect.Descriptor instead.
func (*UpdateMessageRequestOne) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateMessageRequestOne) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *UpdateMessageRequestOne) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string             `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	File     *httpbody.HttpBody `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *UploadFileRequest) Reset() {
	*x = UploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequest) ProtoMessage() {}

func (x *UploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequest.ProtoReflect.Descriptor instead.
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{4}
}

func (x *UploadFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UploadFileRequest) GetFile() *httpbody.HttpBody {
	if x != nil {
		return x.File
	}
	return nil
}

type Scalars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   *timestamppb.Timestamp  `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration    *durationpb.Duration    `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	BoolValue   *wrapperspb.BoolValue   `protobuf:"bytes,3,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	Int32Value  *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value  *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value *wrapperspb.UInt64Value `protobuf:"bytes,7,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	FloatValue  *wrapperspb.FloatValue  `protobuf:"bytes,8,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	DoubleValue *wrapperspb.DoubleValue `protobuf:"bytes,9,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	BytesValue  *wrapperspb.BytesValue  `protobuf:"bytes,10,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	StringValue *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	FieldMask   *fieldmaskpb.FieldMask  `protobuf:"bytes,12,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *Scalars) Reset() {
	*x = Scalars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scalars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalars) ProtoMessage() {}

func (x *Scalars) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalars.ProtoReflect.Descriptor instead.
func (*Scalars) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{5}
}

func (x *Scalars) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Scalars) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Scalars) GetBoolValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValue
	}
	return nil
}

func (x *Scalars) GetInt32Value() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Value
	}
	return nil
}

func (x *Scalars) GetInt64Value() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Value
	}
	return nil
}

func (x *Scalars) GetUint32Value() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Value
	}
	return nil
}

func (x *Scalars) GetUint64Value() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Value
	}
	return nil
}

func (x *Scalars) GetFloatValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValue
	}
	return nil
}

func (x *Scalars) GetDoubleValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *Scalars) GetBytesValue() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *Scalars) GetStringValue() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *Scalars) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ComplexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue        float64                           `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue         float32                           `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value         int32                             `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value         int64                             `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value        uint32                            `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value        uint64                            `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value        int32                             `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value        int64                             `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Fixed32Value       uint32                            `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed64Value       uint64                            `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed32Value      int32                             `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value      int64                             `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	BoolValue          bool                              `protobuf:"varint,13,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue        string                            `protobuf:"bytes,14,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue         []byte                            `protobuf:"bytes,15,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	DoubleList         []float64                         `protobuf:"fixed64,16,rep,packed,name=double_list,json=doubleList,proto3" json:"double_list,omitempty"`
	FloatList          []float32                         `protobuf:"fixed32,17,rep,packed,name=float_list,json=floatList,proto3" json:"float_list,omitempty"`
	Int32List          []int32                           `protobuf:"varint,18,rep,packed,name=int32_list,json=int32List,proto3" json:"int32_list,omitempty"`
	Int64List          []int64                           `protobuf:"varint,19,rep,packed,name=int64_list,json=int64List,proto3" json:"int64_list,omitempty"`
	Uint32List         []uint32                          `protobuf:"varint,20,rep,packed,name=uint32_list,json=uint32List,proto3" json:"uint32_list,omitempty"`
	Uint64List         []uint64                          `protobuf:"varint,21,rep,packed,name=uint64_list,json=uint64List,proto3" json:"uint64_list,omitempty"`
	Sint32List         []int32                           `protobuf:"zigzag32,22,rep,packed,name=sint32_list,json=sint32List,proto3" json:"sint32_list,omitempty"`
	Sint64List         []int64                           `protobuf:"zigzag64,23,rep,packed,name=sint64_list,json=sint64List,proto3" json:"sint64_list,omitempty"`
	Fixed32List        []uint32                          `protobuf:"fixed32,24,rep,packed,name=fixed32_list,json=fixed32List,proto3" json:"fixed32_list,omitempty"`
	Fixed64List        []uint64                          `protobuf:"fixed64,25,rep,packed,name=fixed64_list,json=fixed64List,proto3" json:"fixed64_list,omitempty"`
	Sfixed32List       []int32                           `protobuf:"fixed32,26,rep,packed,name=sfixed32_list,json=sfixed32List,proto3" json:"sfixed32_list,omitempty"`
	Sfixed64List       []int64                           `protobuf:"fixed64,27,rep,packed,name=sfixed64_list,json=sfixed64List,proto3" json:"sfixed64_list,omitempty"`
	BoolList           []bool                            `protobuf:"varint,28,rep,packed,name=bool_list,json=boolList,proto3" json:"bool_list,omitempty"`
	StringList         []string                          `protobuf:"bytes,29,rep,name=string_list,json=stringList,proto3" json:"string_list,omitempty"`
	BytesList          [][]byte                          `protobuf:"bytes,30,rep,name=bytes_list,json=bytesList,proto3" json:"bytes_list,omitempty"`
	DoubleMap          map[string]float64                `protobuf:"bytes,31,rep,name=double_map,json=doubleMap,proto3" json:"double_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	FloatMap           map[string]float32                `protobuf:"bytes,32,rep,name=float_map,json=floatMap,proto3" json:"float_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Int32Map           map[int32]int32                   `protobuf:"bytes,33,rep,name=int32_map,json=int32Map,proto3" json:"int32_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int64Map           map[int64]int64                   `protobuf:"bytes,34,rep,name=int64_map,json=int64Map,proto3" json:"int64_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uint32Map          map[uint32]uint32                 `protobuf:"bytes,35,rep,name=uint32_map,json=uint32Map,proto3" json:"uint32_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uint64Map          map[uint64]uint64                 `protobuf:"bytes,36,rep,name=uint64_map,json=uint64Map,proto3" json:"uint64_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Sint32Map          map[int32]int32                   `protobuf:"bytes,37,rep,name=sint32_map,json=sint32Map,proto3" json:"sint32_map,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	Sint64Map          map[int64]int64                   `protobuf:"bytes,38,rep,name=sint64_map,json=sint64Map,proto3" json:"sint64_map,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	Fixed32Map         map[uint32]uint32                 `protobuf:"bytes,39,rep,name=fixed32_map,json=fixed32Map,proto3" json:"fixed32_map,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Fixed64Map         map[uint64]uint64                 `protobuf:"bytes,40,rep,name=fixed64_map,json=fixed64Map,proto3" json:"fixed64_map,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Sfixed32Map        map[int32]int32                   `protobuf:"bytes,41,rep,name=sfixed32_map,json=sfixed32Map,proto3" json:"sfixed32_map,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Sfixed64Map        map[int64]int64                   `protobuf:"bytes,42,rep,name=sfixed64_map,json=sfixed64Map,proto3" json:"sfixed64_map,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	BoolMap            map[bool]bool                     `protobuf:"bytes,43,rep,name=bool_map,json=boolMap,proto3" json:"bool_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringMap          map[string]string                 `protobuf:"bytes,44,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BytesMap           map[string][]byte                 `protobuf:"bytes,45,rep,name=bytes_map,json=bytesMap,proto3" json:"bytes_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp          *timestamppb.Timestamp            `protobuf:"bytes,46,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration           *durationpb.Duration              `protobuf:"bytes,47,opt,name=duration,proto3" json:"duration,omitempty"`
	BoolValueWrapper   *wrapperspb.BoolValue             `protobuf:"bytes,48,opt,name=bool_value_wrapper,json=boolValueWrapper,proto3" json:"bool_value_wrapper,omitempty"`
	Int32ValueWrapper  *wrapperspb.Int32Value            `protobuf:"bytes,49,opt,name=int32_value_wrapper,json=int32ValueWrapper,proto3" json:"int32_value_wrapper,omitempty"`
	Int64ValueWrapper  *wrapperspb.Int64Value            `protobuf:"bytes,50,opt,name=int64_value_wrapper,json=int64ValueWrapper,proto3" json:"int64_value_wrapper,omitempty"`
	Uint32ValueWrapper *wrapperspb.UInt32Value           `protobuf:"bytes,51,opt,name=uint32_value_wrapper,json=uint32ValueWrapper,proto3" json:"uint32_value_wrapper,omitempty"`
	Uint64ValueWrapper *wrapperspb.UInt64Value           `protobuf:"bytes,52,opt,name=uint64_value_wrapper,json=uint64ValueWrapper,proto3" json:"uint64_value_wrapper,omitempty"`
	FloatValueWrapper  *wrapperspb.FloatValue            `protobuf:"bytes,53,opt,name=float_value_wrapper,json=floatValueWrapper,proto3" json:"float_value_wrapper,omitempty"`
	DoubleValueWrapper *wrapperspb.DoubleValue           `protobuf:"bytes,54,opt,name=double_value_wrapper,json=doubleValueWrapper,proto3" json:"double_value_wrapper,omitempty"`
	BytesValueWrapper  *wrapperspb.BytesValue            `protobuf:"bytes,55,opt,name=bytes_value_wrapper,json=bytesValueWrapper,proto3" json:"bytes_value_wrapper,omitempty"`
	StringValueWrapper *wrapperspb.StringValue           `protobuf:"bytes,56,opt,name=string_value_wrapper,json=stringValueWrapper,proto3" json:"string_value_wrapper,omitempty"`
	FieldMask          *fieldmaskpb.FieldMask            `protobuf:"bytes,57,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	Struct             *structpb.Struct                  `protobuf:"bytes,58,opt,name=struct,proto3" json:"struct,omitempty"`
	Any                *anypb.Any                        `protobuf:"bytes,59,opt,name=any,proto3" json:"any,omitempty"`
	Value              *structpb.Value                   `protobuf:"bytes,60,opt,name=value,proto3" json:"value,omitempty"`
	ListValue          *structpb.ListValue               `protobuf:"bytes,61,opt,name=list_value,json=listValue,proto3" json:"list_value,omitempty"`
	NullValue          structpb.NullValue                `protobuf:"varint,62,opt,name=null_value,json=nullValue,proto3,enum=google.protobuf.NullValue" json:"null_value,omitempty"`
	Empty              *emptypb.Empty                    `protobuf:"bytes,63,opt,name=empty,proto3" json:"empty,omitempty"`
	Nested             *ComplexRequest_Nested            `protobuf:"bytes,64,opt,name=nested,proto3" json:"nested,omitempty"`
	NestedList         []*ComplexRequest_Nested          `protobuf:"bytes,65,rep,name=nested_list,json=nestedList,proto3" json:"nested_list,omitempty"`
	NestedMap          map[string]*ComplexRequest_Nested `protobuf:"bytes,66,rep,name=nested_map,json=nestedMap,proto3" json:"nested_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumValue          ComplexRequest_Enum               `protobuf:"varint,67,opt,name=enum_value,json=enumValue,proto3,enum=larking.testpb.ComplexRequest_Enum" json:"enum_value,omitempty"`
	EnumList           []ComplexRequest_Enum             `protobuf:"varint,68,rep,packed,name=enum_list,json=enumList,proto3,enum=larking.testpb.ComplexRequest_Enum" json:"enum_list,omitempty"`
	EnumMap            map[string]ComplexRequest_Enum    `protobuf:"bytes,69,rep,name=enum_map,json=enumMap,proto3" json:"enum_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=larking.testpb.ComplexRequest_Enum"`
	// Types that are assignable to Oneof:
	//
	//	*ComplexRequest_OneofDoubleValue
	//	*ComplexRequest_OneofFloatValue
	//	*ComplexRequest_OneofInt32Value
	//	*ComplexRequest_OneofInt64Value
	//	*ComplexRequest_OneofUint32Value
	//	*ComplexRequest_OneofUint64Value
	//	*ComplexRequest_OneofSint32Value
	//	*ComplexRequest_OneofSint64Value
	//	*ComplexRequest_OneofFixed32Value
	//	*ComplexRequest_OneofFixed64Value
	//	*ComplexRequest_OneofSfixed32Value
	//	*ComplexRequest_OneofSfixed64Value
	//	*ComplexRequest_OneofBoolValue
	//	*ComplexRequest_OneofStringValue
	//	*ComplexRequest_OneofBytesValue
	//	*ComplexRequest_OneofTimestamp
	//	*ComplexRequest_OneofDuration
	//	*ComplexRequest_OneofBoolValueWrapper
	//	*ComplexRequest_OneofInt32ValueWrapper
	//	*ComplexRequest_OneofInt64ValueWrapper
	//	*ComplexRequest_OneofUint32ValueWrapper
	//	*ComplexRequest_OneofUint64ValueWrapper
	//	*ComplexRequest_OneofFloatValueWrapper
	//	*ComplexRequest_OneofDoubleValueWrapper
	//	*ComplexRequest_OneofBytesValueWrapper
	//	*ComplexRequest_OneofStringValueWrapper
	//	*ComplexRequest_OneofFieldMask
	//	*ComplexRequest_OneofStruct
	//	*ComplexRequest_OneofAny
	//	*ComplexRequest_OneofValue
	//	*ComplexRequest_OneofListValue
	//	*ComplexRequest_OneofNullValue
	//	*ComplexRequest_OneofEmpty
	//	*ComplexRequest_OneofNested
	//	*ComplexRequest_OneofEnumValue
	Oneof isComplexRequest_Oneof `protobuf_oneof:"oneof"`
}

func (x *ComplexRequest) Reset() {
	*x = ComplexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexRequest) ProtoMessage() {}

func (x *ComplexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexRequest.ProtoReflect.Descriptor instead.
func (*ComplexRequest) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{6}
}

func (x *ComplexRequest) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ComplexRequest) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *ComplexRequest) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *ComplexRequest) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *ComplexRequest) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *ComplexRequest) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *ComplexRequest) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *ComplexRequest) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *ComplexRequest) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *ComplexRequest) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *ComplexRequest) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *ComplexRequest) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

func (x *ComplexRequest) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *ComplexRequest) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ComplexRequest) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *ComplexRequest) GetDoubleList() []float64 {
	if x != nil {
		return x.DoubleList
	}
	return nil
}

func (x *ComplexRequest) GetFloatList() []float32 {
	if x != nil {
		return x.FloatList
	}
	return nil
}

func (x *ComplexRequest) GetInt32List() []int32 {
	if x != nil {
		return x.Int32List
	}
	return nil
}

func (x *ComplexRequest) GetInt64List() []int64 {
	if x != nil {
		return x.Int64List
	}
	return nil
}

func (x *ComplexRequest) GetUint32List() []uint32 {
	if x != nil {
		return x.Uint32List
	}
	return nil
}

func (x *ComplexRequest) GetUint64List() []uint64 {
	if x != nil {
		return x.Uint64List
	}
	return nil
}

func (x *ComplexRequest) GetSint32List() []int32 {
	if x != nil {
		return x.Sint32List
	}
	return nil
}

func (x *ComplexRequest) GetSint64List() []int64 {
	if x != nil {
		return x.Sint64List
	}
	return nil
}

func (x *ComplexRequest) GetFixed32List() []uint32 {
	if x != nil {
		return x.Fixed32List
	}
	return nil
}

func (x *ComplexRequest) GetFixed64List() []uint64 {
	if x != nil {
		return x.Fixed64List
	}
	return nil
}

func (x *ComplexRequest) GetSfixed32List() []int32 {
	if x != nil {
		return x.Sfixed32List
	}
	return nil
}

func (x *ComplexRequest) GetSfixed64List() []int64 {
	if x != nil {
		return x.Sfixed64List
	}
	return nil
}

func (x *ComplexRequest) GetBoolList() []bool {
	if x != nil {
		return x.BoolList
	}
	return nil
}

func (x *ComplexRequest) GetStringList() []string {
	if x != nil {
		return x.StringList
	}
	return nil
}

func (x *ComplexRequest) GetBytesList() [][]byte {
	if x != nil {
		return x.BytesList
	}
	return nil
}

func (x *ComplexRequest) GetDoubleMap() map[string]float64 {
	if x != nil {
		return x.DoubleMap
	}
	return nil
}

func (x *ComplexRequest) GetFloatMap() map[string]float32 {
	if x != nil {
		return x.FloatMap
	}
	return nil
}

func (x *ComplexRequest) GetInt32Map() map[int32]int32 {
	if x != nil {
		return x.Int32Map
	}
	return nil
}

func (x *ComplexRequest) GetInt64Map() map[int64]int64 {
	if x != nil {
		return x.Int64Map
	}
	return nil
}

func (x *ComplexRequest) GetUint32Map() map[uint32]uint32 {
	if x != nil {
		return x.Uint32Map
	}
	return nil
}

func (x *ComplexRequest) GetUint64Map() map[uint64]uint64 {
	if x != nil {
		return x.Uint64Map
	}
	return nil
}

func (x *ComplexRequest) GetSint32Map() map[int32]int32 {
	if x != nil {
		return x.Sint32Map
	}
	return nil
}

func (x *ComplexRequest) GetSint64Map() map[int64]int64 {
	if x != nil {
		return x.Sint64Map
	}
	return nil
}

func (x *ComplexRequest) GetFixed32Map() map[uint32]uint32 {
	if x != nil {
		return x.Fixed32Map
	}
	return nil
}

func (x *ComplexRequest) GetFixed64Map() map[uint64]uint64 {
	if x != nil {
		return x.Fixed64Map
	}
	return nil
}

func (x *ComplexRequest) GetSfixed32Map() map[int32]int32 {
	if x != nil {
		return x.Sfixed32Map
	}
	return nil
}

func (x *ComplexRequest) GetSfixed64Map() map[int64]int64 {
	if x != nil {
		return x.Sfixed64Map
	}
	return nil
}

func (x *ComplexRequest) GetBoolMap() map[bool]bool {
	if x != nil {
		return x.BoolMap
	}
	return nil
}

func (x *ComplexRequest) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *ComplexRequest) GetBytesMap() map[string][]byte {
	if x != nil {
		return x.BytesMap
	}
	return nil
}

func (x *ComplexRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ComplexRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ComplexRequest) GetBoolValueWrapper() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetInt32ValueWrapper() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32ValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetInt64ValueWrapper() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64ValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetUint32ValueWrapper() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32ValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetUint64ValueWrapper() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64ValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetFloatValueWrapper() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetDoubleValueWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetBytesValueWrapper() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetStringValueWrapper() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *ComplexRequest) GetStruct() *structpb.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *ComplexRequest) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *ComplexRequest) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ComplexRequest) GetListValue() *structpb.ListValue {
	if x != nil {
		return x.ListValue
	}
	return nil
}

func (x *ComplexRequest) GetNullValue() structpb.NullValue {
	if x != nil {
		return x.NullValue
	}
	return structpb.NullValue(0)
}

func (x *ComplexRequest) GetEmpty() *emptypb.Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

func (x *ComplexRequest) GetNested() *ComplexRequest_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *ComplexRequest) GetNestedList() []*ComplexRequest_Nested {
	if x != nil {
		return x.NestedList
	}
	return nil
}

func (x *ComplexRequest) GetNestedMap() map[string]*ComplexRequest_Nested {
	if x != nil {
		return x.NestedMap
	}
	return nil
}

func (x *ComplexRequest) GetEnumValue() ComplexRequest_Enum {
	if x != nil {
		return x.EnumValue
	}
	return ComplexRequest_ENUM_UNSPECIFIED
}

func (x *ComplexRequest) GetEnumList() []ComplexRequest_Enum {
	if x != nil {
		return x.EnumList
	}
	return nil
}

func (x *ComplexRequest) GetEnumMap() map[string]ComplexRequest_Enum {
	if x != nil {
		return x.EnumMap
	}
	return nil
}

func (m *ComplexRequest) GetOneof() isComplexRequest_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (x *ComplexRequest) GetOneofDoubleValue() float64 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofDoubleValue); ok {
		return x.OneofDoubleValue
	}
	return 0
}

func (x *ComplexRequest) GetOneofFloatValue() float32 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofFloatValue); ok {
		return x.OneofFloatValue
	}
	return 0
}

func (x *ComplexRequest) GetOneofInt32Value() int32 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofInt32Value); ok {
		return x.OneofInt32Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofInt64Value() int64 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofInt64Value); ok {
		return x.OneofInt64Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofUint32Value() uint32 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofUint32Value); ok {
		return x.OneofUint32Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofUint64Value() uint64 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofUint64Value); ok {
		return x.OneofUint64Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofSint32Value() int32 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofSint32Value); ok {
		return x.OneofSint32Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofSint64Value() int64 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofSint64Value); ok {
		return x.OneofSint64Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofFixed32Value() uint32 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofFixed32Value); ok {
		return x.OneofFixed32Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofFixed64Value() uint64 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofFixed64Value); ok {
		return x.OneofFixed64Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofSfixed32Value() int32 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofSfixed32Value); ok {
		return x.OneofSfixed32Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofSfixed64Value() int64 {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofSfixed64Value); ok {
		return x.OneofSfixed64Value
	}
	return 0
}

func (x *ComplexRequest) GetOneofBoolValue() bool {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofBoolValue); ok {
		return x.OneofBoolValue
	}
	return false
}

func (x *ComplexRequest) GetOneofStringValue() string {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofStringValue); ok {
		return x.OneofStringValue
	}
	return ""
}

func (x *ComplexRequest) GetOneofBytesValue() []byte {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofBytesValue); ok {
		return x.OneofBytesValue
	}
	return nil
}

func (x *ComplexRequest) GetOneofTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofTimestamp); ok {
		return x.OneofTimestamp
	}
	return nil
}

func (x *ComplexRequest) GetOneofDuration() *durationpb.Duration {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofDuration); ok {
		return x.OneofDuration
	}
	return nil
}

func (x *ComplexRequest) GetOneofBoolValueWrapper() *wrapperspb.BoolValue {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofBoolValueWrapper); ok {
		return x.OneofBoolValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofInt32ValueWrapper() *wrapperspb.Int32Value {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofInt32ValueWrapper); ok {
		return x.OneofInt32ValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofInt64ValueWrapper() *wrapperspb.Int64Value {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofInt64ValueWrapper); ok {
		return x.OneofInt64ValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofUint32ValueWrapper() *wrapperspb.UInt32Value {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofUint32ValueWrapper); ok {
		return x.OneofUint32ValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofUint64ValueWrapper() *wrapperspb.UInt64Value {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofUint64ValueWrapper); ok {
		return x.OneofUint64ValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofFloatValueWrapper() *wrapperspb.FloatValue {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofFloatValueWrapper); ok {
		return x.OneofFloatValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofDoubleValueWrapper() *wrapperspb.DoubleValue {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofDoubleValueWrapper); ok {
		return x.OneofDoubleValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofBytesValueWrapper() *wrapperspb.BytesValue {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofBytesValueWrapper); ok {
		return x.OneofBytesValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofStringValueWrapper() *wrapperspb.StringValue {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofStringValueWrapper); ok {
		return x.OneofStringValueWrapper
	}
	return nil
}

func (x *ComplexRequest) GetOneofFieldMask() *fieldmaskpb.FieldMask {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofFieldMask); ok {
		return x.OneofFieldMask
	}
	return nil
}

func (x *ComplexRequest) GetOneofStruct() *structpb.Struct {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofStruct); ok {
		return x.OneofStruct
	}
	return nil
}

func (x *ComplexRequest) GetOneofAny() *anypb.Any {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofAny); ok {
		return x.OneofAny
	}
	return nil
}

func (x *ComplexRequest) GetOneofValue() *structpb.Value {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofValue); ok {
		return x.OneofValue
	}
	return nil
}

func (x *ComplexRequest) GetOneofListValue() *structpb.ListValue {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofListValue); ok {
		return x.OneofListValue
	}
	return nil
}

func (x *ComplexRequest) GetOneofNullValue() structpb.NullValue {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofNullValue); ok {
		return x.OneofNullValue
	}
	return structpb.NullValue(0)
}

func (x *ComplexRequest) GetOneofEmpty() *emptypb.Empty {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofEmpty); ok {
		return x.OneofEmpty
	}
	return nil
}

func (x *ComplexRequest) GetOneofNested() *ComplexRequest_Nested {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofNested); ok {
		return x.OneofNested
	}
	return nil
}

func (x *ComplexRequest) GetOneofEnumValue() ComplexRequest_Enum {
	if x, ok := x.GetOneof().(*ComplexRequest_OneofEnumValue); ok {
		return x.OneofEnumValue
	}
	return ComplexRequest_ENUM_UNSPECIFIED
}

type isComplexRequest_Oneof interface {
	isComplexRequest_Oneof()
}

type ComplexRequest_OneofDoubleValue struct {
	OneofDoubleValue float64 `protobuf:"fixed64,70,opt,name=oneof_double_value,json=oneofDoubleValue,proto3,oneof"`
}

type ComplexRequest_OneofFloatValue struct {
	OneofFloatValue float32 `protobuf:"fixed32,71,opt,name=oneof_float_value,json=oneofFloatValue,proto3,oneof"`
}

type ComplexRequest_OneofInt32Value struct {
	OneofInt32Value int32 `protobuf:"varint,72,opt,name=oneof_int32_value,json=oneofInt32Value,proto3,oneof"`
}

type ComplexRequest_OneofInt64Value struct {
	OneofInt64Value int64 `protobuf:"varint,73,opt,name=oneof_int64_value,json=oneofInt64Value,proto3,oneof"`
}

type ComplexRequest_OneofUint32Value struct {
	OneofUint32Value uint32 `protobuf:"varint,74,opt,name=oneof_uint32_value,json=oneofUint32Value,proto3,oneof"`
}

type ComplexRequest_OneofUint64Value struct {
	OneofUint64Value uint64 `protobuf:"varint,75,opt,name=oneof_uint64_value,json=oneofUint64Value,proto3,oneof"`
}

type ComplexRequest_OneofSint32Value struct {
	OneofSint32Value int32 `protobuf:"zigzag32,76,opt,name=oneof_sint32_value,json=oneofSint32Value,proto3,oneof"`
}

type ComplexRequest_OneofSint64Value struct {
	OneofSint64Value int64 `protobuf:"zigzag64,77,opt,name=oneof_sint64_value,json=oneofSint64Value,proto3,oneof"`
}

type ComplexRequest_OneofFixed32Value struct {
	OneofFixed32Value uint32 `protobuf:"fixed32,78,opt,name=oneof_fixed32_value,json=oneofFixed32Value,proto3,oneof"`
}

type ComplexRequest_OneofFixed64Value struct {
	OneofFixed64Value uint64 `protobuf:"fixed64,79,opt,name=oneof_fixed64_value,json=oneofFixed64Value,proto3,oneof"`
}

type ComplexRequest_OneofSfixed32Value struct {
	OneofSfixed32Value int32 `protobuf:"fixed32,80,opt,name=oneof_sfixed32_value,json=oneofSfixed32Value,proto3,oneof"`
}

type ComplexRequest_OneofSfixed64Value struct {
	OneofSfixed64Value int64 `protobuf:"fixed64,81,opt,name=oneof_sfixed64_value,json=oneofSfixed64Value,proto3,oneof"`
}

type ComplexRequest_OneofBoolValue struct {
	OneofBoolValue bool `protobuf:"varint,82,opt,name=oneof_bool_value,json=oneofBoolValue,proto3,oneof"`
}

type ComplexRequest_OneofStringValue struct {
	OneofStringValue string `protobuf:"bytes,83,opt,name=oneof_string_value,json=oneofStringValue,proto3,oneof"`
}

type ComplexRequest_OneofBytesValue struct {
	OneofBytesValue []byte `protobuf:"bytes,84,opt,name=oneof_bytes_value,json=oneofBytesValue,proto3,oneof"`
}

type ComplexRequest_OneofTimestamp struct {
	OneofTimestamp *timestamppb.Timestamp `protobuf:"bytes,85,opt,name=oneof_timestamp,json=oneofTimestamp,proto3,oneof"`
}

type ComplexRequest_OneofDuration struct {
	OneofDuration *durationpb.Duration `protobuf:"bytes,86,opt,name=oneof_duration,json=oneofDuration,proto3,oneof"`
}

type ComplexRequest_OneofBoolValueWrapper struct {
	OneofBoolValueWrapper *wrapperspb.BoolValue `protobuf:"bytes,87,opt,name=oneof_bool_value_wrapper,json=oneofBoolValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofInt32ValueWrapper struct {
	OneofInt32ValueWrapper *wrapperspb.Int32Value `protobuf:"bytes,88,opt,name=oneof_int32_value_wrapper,json=oneofInt32ValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofInt64ValueWrapper struct {
	OneofInt64ValueWrapper *wrapperspb.Int64Value `protobuf:"bytes,89,opt,name=oneof_int64_value_wrapper,json=oneofInt64ValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofUint32ValueWrapper struct {
	OneofUint32ValueWrapper *wrapperspb.UInt32Value `protobuf:"bytes,90,opt,name=oneof_uint32_value_wrapper,json=oneofUint32ValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofUint64ValueWrapper struct {
	OneofUint64ValueWrapper *wrapperspb.UInt64Value `protobuf:"bytes,91,opt,name=oneof_uint64_value_wrapper,json=oneofUint64ValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofFloatValueWrapper struct {
	OneofFloatValueWrapper *wrapperspb.FloatValue `protobuf:"bytes,92,opt,name=oneof_float_value_wrapper,json=oneofFloatValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofDoubleValueWrapper struct {
	OneofDoubleValueWrapper *wrapperspb.DoubleValue `protobuf:"bytes,93,opt,name=oneof_double_value_wrapper,json=oneofDoubleValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofBytesValueWrapper struct {
	OneofBytesValueWrapper *wrapperspb.BytesValue `protobuf:"bytes,94,opt,name=oneof_bytes_value_wrapper,json=oneofBytesValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofStringValueWrapper struct {
	OneofStringValueWrapper *wrapperspb.StringValue `protobuf:"bytes,95,opt,name=oneof_string_value_wrapper,json=oneofStringValueWrapper,proto3,oneof"`
}

type ComplexRequest_OneofFieldMask struct {
	OneofFieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,96,opt,name=oneof_field_mask,json=oneofFieldMask,proto3,oneof"`
}

type ComplexRequest_OneofStruct struct {
	OneofStruct *structpb.Struct `protobuf:"bytes,97,opt,name=oneof_struct,json=oneofStruct,proto3,oneof"`
}

type ComplexRequest_OneofAny struct {
	OneofAny *anypb.Any `protobuf:"bytes,98,opt,name=oneof_any,json=oneofAny,proto3,oneof"`
}

type ComplexRequest_OneofValue struct {
	OneofValue *structpb.Value `protobuf:"bytes,99,opt,name=oneof_value,json=oneofValue,proto3,oneof"`
}

type ComplexRequest_OneofListValue struct {
	OneofListValue *structpb.ListValue `protobuf:"bytes,100,opt,name=oneof_list_value,json=oneofListValue,proto3,oneof"`
}

type ComplexRequest_OneofNullValue struct {
	OneofNullValue structpb.NullValue `protobuf:"varint,101,opt,name=oneof_null_value,json=oneofNullValue,proto3,enum=google.protobuf.NullValue,oneof"`
}

type ComplexRequest_OneofEmpty struct {
	OneofEmpty *emptypb.Empty `protobuf:"bytes,102,opt,name=oneof_empty,json=oneofEmpty,proto3,oneof"`
}

type ComplexRequest_OneofNested struct {
	OneofNested *ComplexRequest_Nested `protobuf:"bytes,103,opt,name=oneof_nested,json=oneofNested,proto3,oneof"`
}

type ComplexRequest_OneofEnumValue struct {
	OneofEnumValue ComplexRequest_Enum `protobuf:"varint,104,opt,name=oneof_enum_value,json=oneofEnumValue,proto3,enum=larking.testpb.ComplexRequest_Enum,oneof"`
}

func (*ComplexRequest_OneofDoubleValue) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofFloatValue) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofInt32Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofInt64Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofUint32Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofUint64Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofSint32Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofSint64Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofFixed32Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofFixed64Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofSfixed32Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofSfixed64Value) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofBoolValue) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofStringValue) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofBytesValue) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofTimestamp) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofDuration) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofBoolValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofInt32ValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofInt64ValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofUint32ValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofUint64ValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofFloatValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofDoubleValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofBytesValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofStringValueWrapper) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofFieldMask) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofStruct) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofAny) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofValue) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofListValue) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofNullValue) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofEmpty) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofNested) isComplexRequest_Oneof() {}

func (*ComplexRequest_OneofEnumValue) isComplexRequest_Oneof() {}

type Shelf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the shelf. It must have the format of "shelves/*".
	// For example: "shelves/shelf1".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Shelf) Reset() {
	*x = Shelf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shelf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shelf) ProtoMessage() {}

func (x *Shelf) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shelf.ProtoReflect.Descriptor instead.
func (*Shelf) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{7}
}

func (x *Shelf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetShelfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of a shelf. For example: "shelves/shelf1".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetShelfRequest) Reset() {
	*x = GetShelfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShelfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShelfRequest) ProtoMessage() {}

func (x *GetShelfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShelfRequest.ProtoReflect.Descriptor instead.
func (*GetShelfRequest) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{8}
}

func (x *GetShelfRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Book struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the book. It must have the format of "shelves/*/books/*".
	// For example: "shelves/shelf1/books/book2".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ... other properties
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Book) Reset() {
	*x = Book{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book) ProtoMessage() {}

func (x *Book) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book.ProtoReflect.Descriptor instead.
func (*Book) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{9}
}

func (x *Book) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Book) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GetBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of a book. For example: "shelves/shelf1/books/book2".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBookRequest) Reset() {
	*x = GetBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookRequest) ProtoMessage() {}

func (x *GetBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookRequest.ProtoReflect.Descriptor instead.
func (*GetBookRequest) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{10}
}

func (x *GetBookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the parent resource where to create the book.
	// For example: "shelves/shelf1".
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The Book resource to be created. Client must not set the `Book.name` field.
	Book *Book `protobuf:"bytes,2,opt,name=book,proto3" json:"book,omitempty"`
}

func (x *CreateBookRequest) Reset() {
	*x = CreateBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookRequest) ProtoMessage() {}

func (x *CreateBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookRequest.ProtoReflect.Descriptor instead.
func (*CreateBookRequest) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{11}
}

func (x *CreateBookRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateBookRequest) GetBook() *Book {
	if x != nil {
		return x.Book
	}
	return nil
}

type UpdateBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The book resource which replaces the resource on the server.
	Book *Book `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
	// The update mask applies to the resource. For the `FieldMask` definition,
	// see
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateBookRequest) Reset() {
	*x = UpdateBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookRequest) ProtoMessage() {}

func (x *UpdateBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookRequest.ProtoReflect.Descriptor instead.
func (*UpdateBookRequest) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateBookRequest) GetBook() *Book {
	if x != nil {
		return x.Book
	}
	return nil
}

func (x *UpdateBookRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{13}
}

func (x *ChatMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GetMessageRequestTwo_SubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subfield string `protobuf:"bytes,1,opt,name=subfield,proto3" json:"subfield,omitempty"`
}

func (x *GetMessageRequestTwo_SubMessage) Reset() {
	*x = GetMessageRequestTwo_SubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMessageRequestTwo_SubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessageRequestTwo_SubMessage) ProtoMessage() {}

func (x *GetMessageRequestTwo_SubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessageRequestTwo_SubMessage.ProtoReflect.Descriptor instead.
func (*GetMessageRequestTwo_SubMessage) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetMessageRequestTwo_SubMessage) GetSubfield() string {
	if x != nil {
		return x.Subfield
	}
	return ""
}

type ComplexRequest_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue   float64                    `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue    float32                    `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value    int32                      `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value    int64                      `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value   uint32                     `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value   uint64                     `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value   int32                      `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value   int64                      `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Fixed32Value  uint32                     `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed64Value  uint64                     `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed32Value int32                      `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value int64                      `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	BoolValue     bool                       `protobuf:"varint,13,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue   string                     `protobuf:"bytes,14,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue    []byte                     `protobuf:"bytes,15,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	EnumValue     ComplexRequest_Nested_Enum `protobuf:"varint,16,opt,name=enum_value,json=enumValue,proto3,enum=larking.testpb.ComplexRequest_Nested_Enum" json:"enum_value,omitempty"`
}

func (x *ComplexRequest_Nested) Reset() {
	*x = ComplexRequest_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_larking_api_test_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexRequest_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexRequest_Nested) ProtoMessage() {}

func (x *ComplexRequest_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_larking_api_test_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexRequest_Nested.ProtoReflect.Descriptor instead.
func (*ComplexRequest_Nested) Descriptor() ([]byte, []int) {
	return file_larking_api_test_proto_rawDescGZIP(), []int{6, 15}
}

func (x *ComplexRequest_Nested) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ComplexRequest_Nested) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *ComplexRequest_Nested) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

func (x *ComplexRequest_Nested) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *ComplexRequest_Nested) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ComplexRequest_Nested) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *ComplexRequest_Nested) GetEnumValue() ComplexRequest_Nested_Enum {
	if x != nil {
		return x.EnumValue
	}
	return ComplexRequest_Nested_ENUM_UNSPECIFIED
}

var File_larking_api_test_proto protoreflect.FileDescriptor

var file_larking_api_test_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x77, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x03, 0x73, 0x75, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x28, 0x0a,
	0x0a, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x6b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0xec, 0x05, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xf2,
	0x3d, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0d, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x11, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x12, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x0c, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03,
	0x28, 0x10, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x09, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x4c, 0x0a, 0x0a,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x4c, 0x0a, 0x0a, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0c, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12, 0x46,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e,
	0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61,
	0x6e, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6e,
	0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x41, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x42, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a,
	0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x45, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00,
	0x52, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x06,
	0x48, 0x00, 0x52, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x0f, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x57,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x19, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x5b, 0x0a,
	0x1a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x1a, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x5b, 0x0a, 0x1a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x58,
	0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x5e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x1a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3c, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x61, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x41, 0x6e, 0x79,
	0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x4f, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8e, 0x05, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0d, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a,
	0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x65,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x63, 0x0a, 0x0e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0c, 0x45,
	0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x22, 0x1b, 0x0a, 0x05, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x25, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x55, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04,
	0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x61, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x7a, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x62,
	0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x35, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x32, 0xf3, 0x0c, 0x0a, 0x09, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x72, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x1a, 0x17,
	0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x2a, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x24, 0x2e,
	0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x77, 0x6f, 0x1a, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x68, 0x5a, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5a, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x7b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e,
	0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x1a, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x70, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x32, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x5e, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x74, 0x65, 0x78, 0x74, 0x3d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x3a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x5f, 0x0a,
	0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x74, 0x65, 0x78, 0x74, 0x3d, 0x2a, 0x7d, 0x3a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x65,
	0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x74, 0x65, 0x78, 0x74, 0x3d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x61, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x74, 0x65, 0x78, 0x74, 0x3d, 0x2a,
	0x2a, 0x7d, 0x3a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x57, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76,
	0x33, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x12, 0x53, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x65,
	0x12, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x7b, 0x74, 0x65, 0x78,
	0x74, 0x7d, 0x2f, 0x6f, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b,
	0x2f, 0x7b, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x74, 0x77, 0x6f, 0x12, 0x60, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x12, 0x1f, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x65, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1e, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x71, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x12, 0x21, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x3a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x21, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x32, 0x21, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x68, 0x65,
	0x6c, 0x76, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x32,
	0xee, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x6c, 0x61,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x11, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x79, 0x0a, 0x13, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x6c,
	0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x17, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x28, 0x01, 0x30, 0x01,
	0x32, 0x5c, 0x0a, 0x09, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x4f, 0x0a,
	0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x5f,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x05, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x32,
	0x7c, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x70, 0x0a, 0x04, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x1b, 0x2e, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x42, 0x1f, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x2a, 0x7d, 0x28, 0x01, 0x30, 0x01, 0x42, 0x1e, 0x5a,
	0x1c, 0x6c, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_larking_api_test_proto_rawDescOnce sync.Once
	file_larking_api_test_proto_rawDescData = file_larking_api_test_proto_rawDesc
)

func file_larking_api_test_proto_rawDescGZIP() []byte {
	file_larking_api_test_proto_rawDescOnce.Do(func() {
		file_larking_api_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_larking_api_test_proto_rawDescData)
	})
	return file_larking_api_test_proto_rawDescData
}

var file_larking_api_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_larking_api_test_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_larking_api_test_proto_goTypes = []interface{}{
	(ComplexRequest_Enum)(0),                // 0: larking.testpb.ComplexRequest.Enum
	(ComplexRequest_Nested_Enum)(0),         // 1: larking.testpb.ComplexRequest.Nested.Enum
	(*Message)(nil),                         // 2: larking.testpb.Message
	(*GetMessageRequestOne)(nil),            // 3: larking.testpb.GetMessageRequestOne
	(*GetMessageRequestTwo)(nil),            // 4: larking.testpb.GetMessageRequestTwo
	(*UpdateMessageRequestOne)(nil),         // 5: larking.testpb.UpdateMessageRequestOne
	(*UploadFileRequest)(nil),               // 6: larking.testpb.UploadFileRequest
	(*Scalars)(nil),                         // 7: larking.testpb.Scalars
	(*ComplexRequest)(nil),                  // 8: larking.testpb.ComplexRequest
	(*Shelf)(nil),                           // 9: larking.testpb.Shelf
	(*GetShelfRequest)(nil),                 // 10: larking.testpb.GetShelfRequest
	(*Book)(nil),                            // 11: larking.testpb.Book
	(*GetBookRequest)(nil),                  // 12: larking.testpb.GetBookRequest
	(*CreateBookRequest)(nil),               // 13: larking.testpb.CreateBookRequest
	(*UpdateBookRequest)(nil),               // 14: larking.testpb.UpdateBookRequest
	(*ChatMessage)(nil),                     // 15: larking.testpb.ChatMessage
	(*GetMessageRequestTwo_SubMessage)(nil), // 16: larking.testpb.GetMessageRequestTwo.SubMessage
	nil,                                     // 17: larking.testpb.ComplexRequest.DoubleMapEntry
	nil,                                     // 18: larking.testpb.ComplexRequest.FloatMapEntry
	nil,                                     // 19: larking.testpb.ComplexRequest.Int32MapEntry
	nil,                                     // 20: larking.testpb.ComplexRequest.Int64MapEntry
	nil,                                     // 21: larking.testpb.ComplexRequest.Uint32MapEntry
	nil,                                     // 22: larking.testpb.ComplexRequest.Uint64MapEntry
	nil,                                     // 23: larking.testpb.ComplexRequest.Sint32MapEntry
	nil,                                     // 24: larking.testpb.ComplexRequest.Sint64MapEntry
	nil,                                     // 25: larking.testpb.ComplexRequest.Fixed32MapEntry
	nil,                                     // 26: larking.testpb.ComplexRequest.Fixed64MapEntry
	nil,                                     // 27: larking.testpb.ComplexRequest.Sfixed32MapEntry
	nil,                                     // 28: larking.testpb.ComplexRequest.Sfixed64MapEntry
	nil,                                     // 29: larking.testpb.ComplexRequest.BoolMapEntry
	nil,                                     // 30: larking.testpb.ComplexRequest.StringMapEntry
	nil,                                     // 31: larking.testpb.ComplexRequest.BytesMapEntry
	(*ComplexRequest_Nested)(nil),           // 32: larking.testpb.ComplexRequest.Nested
	nil,                                     // 33: larking.testpb.ComplexRequest.NestedMapEntry
	nil,                                     // 34: larking.testpb.ComplexRequest.EnumMapEntry
	(*httpbody.HttpBody)(nil),               // 35: google.api.HttpBody
	(*timestamppb.Timestamp)(nil),           // 36: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),             // 37: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),            // 38: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),           // 39: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),           // 40: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),          // 41: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),          // 42: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),           // 43: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil),          // 44: google.protobuf.DoubleValue
	(*wrapperspb.BytesValue)(nil),           // 45: google.protobuf.BytesValue
	(*wrapperspb.StringValue)(nil),          // 46: google.protobuf.StringValue
	(*fieldmaskpb.FieldMask)(nil),           // 47: google.protobuf.FieldMask
	(*structpb.Struct)(nil),                 // 48: google.protobuf.Struct
	(*anypb.Any)(nil),                       // 49: google.protobuf.Any
	(*structpb.Value)(nil),                  // 50: google.protobuf.Value
	(*structpb.ListValue)(nil),              // 51: google.protobuf.ListValue
	(structpb.NullValue)(0),                 // 52: google.protobuf.NullValue
	(*emptypb.Empty)(nil),                   // 53: google.protobuf.Empty
}
var file_larking_api_test_proto_depIdxs = []int32{
	16,  // 0: larking.testpb.GetMessageRequestTwo.sub:type_name -> larking.testpb.GetMessageRequestTwo.SubMessage
	2,   // 1: larking.testpb.UpdateMessageRequestOne.message:type_name -> larking.testpb.Message
	35,  // 2: larking.testpb.UploadFileRequest.file:type_name -> google.api.HttpBody
	36,  // 3: larking.testpb.Scalars.timestamp:type_name -> google.protobuf.Timestamp
	37,  // 4: larking.testpb.Scalars.duration:type_name -> google.protobuf.Duration
	38,  // 5: larking.testpb.Scalars.bool_value:type_name -> google.protobuf.BoolValue
	39,  // 6: larking.testpb.Scalars.int32_value:type_name -> google.protobuf.Int32Value
	40,  // 7: larking.testpb.Scalars.int64_value:type_name -> google.protobuf.Int64Value
	41,  // 8: larking.testpb.Scalars.uint32_value:type_name -> google.protobuf.UInt32Value
	42,  // 9: larking.testpb.Scalars.uint64_value:type_name -> google.protobuf.UInt64Value
	43,  // 10: larking.testpb.Scalars.float_value:type_name -> google.protobuf.FloatValue
	44,  // 11: larking.testpb.Scalars.double_value:type_name -> google.protobuf.DoubleValue
	45,  // 12: larking.testpb.Scalars.bytes_value:type_name -> google.protobuf.BytesValue
	46,  // 13: larking.testpb.Scalars.string_value:type_name -> google.protobuf.StringValue
	47,  // 14: larking.testpb.Scalars.field_mask:type_name -> google.protobuf.FieldMask
	17,  // 15: larking.testpb.ComplexRequest.double_map:type_name -> larking.testpb.ComplexRequest.DoubleMapEntry
	18,  // 16: larking.testpb.ComplexRequest.float_map:type_name -> larking.testpb.ComplexRequest.FloatMapEntry
	19,  // 17: larking.testpb.ComplexRequest.int32_map:type_name -> larking.testpb.ComplexRequest.Int32MapEntry
	20,  // 18: larking.testpb.ComplexRequest.int64_map:type_name -> larking.testpb.ComplexRequest.Int64MapEntry
	21,  // 19: larking.testpb.ComplexRequest.uint32_map:type_name -> larking.testpb.ComplexRequest.Uint32MapEntry
	22,  // 20: larking.testpb.ComplexRequest.uint64_map:type_name -> larking.testpb.ComplexRequest.Uint64MapEntry
	23,  // 21: larking.testpb.ComplexRequest.sint32_map:type_name -> larking.testpb.ComplexRequest.Sint32MapEntry
	24,  // 22: larking.testpb.ComplexRequest.sint64_map:type_name -> larking.testpb.ComplexRequest.Sint64MapEntry
	25,  // 23: larking.testpb.ComplexRequest.fixed32_map:type_name -> larking.testpb.ComplexRequest.Fixed32MapEntry
	26,  // 24: larking.testpb.ComplexRequest.fixed64_map:type_name -> larking.testpb.ComplexRequest.Fixed64MapEntry
	27,  // 25: larking.testpb.ComplexRequest.sfixed32_map:type_name -> larking.testpb.ComplexRequest.Sfixed32MapEntry
	28,  // 26: larking.testpb.ComplexRequest.sfixed64_map:type_name -> larking.testpb.ComplexRequest.Sfixed64MapEntry
	29,  // 27: larking.testpb.ComplexRequest.bool_map:type_name -> larking.testpb.ComplexRequest.BoolMapEntry
	30,  // 28: larking.testpb.ComplexRequest.string_map:type_name -> larking.testpb.ComplexRequest.StringMapEntry
	31,  // 29: larking.testpb.ComplexRequest.bytes_map:type_name -> larking.testpb.ComplexRequest.BytesMapEntry
	36,  // 30: larking.testpb.ComplexRequest.timestamp:type_name -> google.protobuf.Timestamp
	37,  // 31: larking.testpb.ComplexRequest.duration:type_name -> google.protobuf.Duration
	38,  // 32: larking.testpb.ComplexRequest.bool_value_wrapper:type_name -> google.protobuf.BoolValue
	39,  // 33: larking.testpb.ComplexRequest.int32_value_wrapper:type_name -> google.protobuf.Int32Value
	40,  // 34: larking.testpb.ComplexRequest.int64_value_wrapper:type_name -> google.protobuf.Int64Value
	41,  // 35: larking.testpb.ComplexRequest.uint32_value_wrapper:type_name -> google.protobuf.UInt32Value
	42,  // 36: larking.testpb.ComplexRequest.uint64_value_wrapper:type_name -> google.protobuf.UInt64Value
	43,  // 37: larking.testpb.ComplexRequest.float_value_wrapper:type_name -> google.protobuf.FloatValue
	44,  // 38: larking.testpb.ComplexRequest.double_value_wrapper:type_name -> google.protobuf.DoubleValue
	45,  // 39: larking.testpb.ComplexRequest.bytes_value_wrapper:type_name -> google.protobuf.BytesValue
	46,  // 40: larking.testpb.ComplexRequest.string_value_wrapper:type_name -> google.protobuf.StringValue
	47,  // 41: larking.testpb.ComplexRequest.field_mask:type_name -> google.protobuf.FieldMask
	48,  // 42: larking.testpb.ComplexRequest.struct:type_name -> google.protobuf.Struct
	49,  // 43: larking.testpb.ComplexRequest.any:type_name -> google.protobuf.Any
	50,  // 44: larking.testpb.ComplexRequest.value:type_name -> google.protobuf.Value
	51,  // 45: larking.testpb.ComplexRequest.list_value:type_name -> google.protobuf.ListValue
	52,  // 46: larking.testpb.ComplexRequest.null_value:type_name -> google.protobuf.NullValue
	53,  // 47: larking.testpb.ComplexRequest.empty:type_name -> google.protobuf.Empty
	32,  // 48: larking.testpb.ComplexRequest.nested:type_name -> larking.testpb.ComplexRequest.Nested
	32,  // 49: larking.testpb.ComplexRequest.nested_list:type_name -> larking.testpb.ComplexRequest.Nested
	33,  // 50: larking.testpb.ComplexRequest.nested_map:type_name -> larking.testpb.ComplexRequest.NestedMapEntry
	0,   // 51: larking.testpb.ComplexRequest.enum_value:type_name -> larking.testpb.ComplexRequest.Enum
	0,   // 52: larking.testpb.ComplexRequest.enum_list:type_name -> larking.testpb.ComplexRequest.Enum
	34,  // 53: larking.testpb.ComplexRequest.enum_map:type_name -> larking.testpb.ComplexRequest.EnumMapEntry
	36,  // 54: larking.testpb.ComplexRequest.oneof_timestamp:type_name -> google.protobuf.Timestamp
	37,  // 55: larking.testpb.ComplexRequest.oneof_duration:type_name -> google.protobuf.Duration
	38,  // 56: larking.testpb.ComplexRequest.oneof_bool_value_wrapper:type_name -> google.protobuf.BoolValue
	39,  // 57: larking.testpb.ComplexRequest.oneof_int32_value_wrapper:type_name -> google.protobuf.Int32Value
	40,  // 58: larking.testpb.ComplexRequest.oneof_int64_value_wrapper:type_name -> google.protobuf.Int64Value
	41,  // 59: larking.testpb.ComplexRequest.oneof_uint32_value_wrapper:type_name -> google.protobuf.UInt32Value
	42,  // 60: larking.testpb.ComplexRequest.oneof_uint64_value_wrapper:type_name -> google.protobuf.UInt64Value
	43,  // 61: larking.testpb.ComplexRequest.oneof_float_value_wrapper:type_name -> google.protobuf.FloatValue
	44,  // 62: larking.testpb.ComplexRequest.oneof_double_value_wrapper:type_name -> google.protobuf.DoubleValue
	45,  // 63: larking.testpb.ComplexRequest.oneof_bytes_value_wrapper:type_name -> google.protobuf.BytesValue
	46,  // 64: larking.testpb.ComplexRequest.oneof_string_value_wrapper:type_name -> google.protobuf.StringValue
	47,  // 65: larking.testpb.ComplexRequest.oneof_field_mask:type_name -> google.protobuf.FieldMask
	48,  // 66: larking.testpb.ComplexRequest.oneof_struct:type_name -> google.protobuf.Struct
	49,  // 67: larking.testpb.ComplexRequest.oneof_any:type_name -> google.protobuf.Any
	50,  // 68: larking.testpb.ComplexRequest.oneof_value:type_name -> google.protobuf.Value
	51,  // 69: larking.testpb.ComplexRequest.oneof_list_value:type_name -> google.protobuf.ListValue
	52,  // 70: larking.testpb.ComplexRequest.oneof_null_value:type_name -> google.protobuf.NullValue
	53,  // 71: larking.testpb.ComplexRequest.oneof_empty:type_name -> google.protobuf.Empty
	32,  // 72: larking.testpb.ComplexRequest.oneof_nested:type_name -> larking.testpb.ComplexRequest.Nested
	0,   // 73: larking.testpb.ComplexRequest.oneof_enum_value:type_name -> larking.testpb.ComplexRequest.Enum
	11,  // 74: larking.testpb.CreateBookRequest.book:type_name -> larking.testpb.Book
	11,  // 75: larking.testpb.UpdateBookRequest.book:type_name -> larking.testpb.Book
	47,  // 76: larking.testpb.UpdateBookRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,   // 77: larking.testpb.ComplexRequest.Nested.enum_value:type_name -> larking.testpb.ComplexRequest.Nested.Enum
	32,  // 78: larking.testpb.ComplexRequest.NestedMapEntry.value:type_name -> larking.testpb.ComplexRequest.Nested
	0,   // 79: larking.testpb.ComplexRequest.EnumMapEntry.value:type_name -> larking.testpb.ComplexRequest.Enum
	3,   // 80: larking.testpb.Messaging.GetMessageOne:input_type -> larking.testpb.GetMessageRequestOne
	4,   // 81: larking.testpb.Messaging.GetMessageTwo:input_type -> larking.testpb.GetMessageRequestTwo
	5,   // 82: larking.testpb.Messaging.UpdateMessage:input_type -> larking.testpb.UpdateMessageRequestOne
	2,   // 83: larking.testpb.Messaging.UpdateMessageBody:input_type -> larking.testpb.Message
	2,   // 84: larking.testpb.Messaging.Action:input_type -> larking.testpb.Message
	2,   // 85: larking.testpb.Messaging.ActionSegment:input_type -> larking.testpb.Message
	2,   // 86: larking.testpb.Messaging.ActionResource:input_type -> larking.testpb.Message
	2,   // 87: larking.testpb.Messaging.ActionSegments:input_type -> larking.testpb.Message
	53,  // 88: larking.testpb.Messaging.BatchGet:input_type -> google.protobuf.Empty
	2,   // 89: larking.testpb.Messaging.VariableOne:input_type -> larking.testpb.Message
	2,   // 90: larking.testpb.Messaging.VariableTwo:input_type -> larking.testpb.Message
	10,  // 91: larking.testpb.Messaging.GetShelf:input_type -> larking.testpb.GetShelfRequest
	12,  // 92: larking.testpb.Messaging.GetBook:input_type -> larking.testpb.GetBookRequest
	13,  // 93: larking.testpb.Messaging.CreateBook:input_type -> larking.testpb.CreateBookRequest
	14,  // 94: larking.testpb.Messaging.UpdateBook:input_type -> larking.testpb.UpdateBookRequest
	6,   // 95: larking.testpb.Files.UploadDownload:input_type -> larking.testpb.UploadFileRequest
	6,   // 96: larking.testpb.Files.LargeUploadDownload:input_type -> larking.testpb.UploadFileRequest
	7,   // 97: larking.testpb.WellKnown.Check:input_type -> larking.testpb.Scalars
	8,   // 98: larking.testpb.Complex.Check:input_type -> larking.testpb.ComplexRequest
	15,  // 99: larking.testpb.ChatRoom.Chat:input_type -> larking.testpb.ChatMessage
	2,   // 100: larking.testpb.Messaging.GetMessageOne:output_type -> larking.testpb.Message
	2,   // 101: larking.testpb.Messaging.GetMessageTwo:output_type -> larking.testpb.Message
	2,   // 102: larking.testpb.Messaging.UpdateMessage:output_type -> larking.testpb.Message
	2,   // 103: larking.testpb.Messaging.UpdateMessageBody:output_type -> larking.testpb.Message
	53,  // 104: larking.testpb.Messaging.Action:output_type -> google.protobuf.Empty
	53,  // 105: larking.testpb.Messaging.ActionSegment:output_type -> google.protobuf.Empty
	53,  // 106: larking.testpb.Messaging.ActionResource:output_type -> google.protobuf.Empty
	53,  // 107: larking.testpb.Messaging.ActionSegments:output_type -> google.protobuf.Empty
	53,  // 108: larking.testpb.Messaging.BatchGet:output_type -> google.protobuf.Empty
	53,  // 109: larking.testpb.Messaging.VariableOne:output_type -> google.protobuf.Empty
	53,  // 110: larking.testpb.Messaging.VariableTwo:output_type -> google.protobuf.Empty
	9,   // 111: larking.testpb.Messaging.GetShelf:output_type -> larking.testpb.Shelf
	11,  // 112: larking.testpb.Messaging.GetBook:output_type -> larking.testpb.Book
	11,  // 113: larking.testpb.Messaging.CreateBook:output_type -> larking.testpb.Book
	11,  // 114: larking.testpb.Messaging.UpdateBook:output_type -> larking.testpb.Book
	35,  // 115: larking.testpb.Files.UploadDownload:output_type -> google.api.HttpBody
	35,  // 116: larking.testpb.Files.LargeUploadDownload:output_type -> google.api.HttpBody
	53,  // 117: larking.testpb.WellKnown.Check:output_type -> google.protobuf.Empty
	53,  // 118: larking.testpb.Complex.Check:output_type -> google.protobuf.Empty
	15,  // 119: larking.testpb.ChatRoom.Chat:output_type -> larking.testpb.ChatMessage
	100, // [100:120] is the sub-list for method output_type
	80,  // [80:100] is the sub-list for method input_type
	80,  // [80:80] is the sub-list for extension type_name
	80,  // [80:80] is the sub-list for extension extendee
	0,   // [0:80] is the sub-list for field type_name
}

func init() { file_larking_api_test_proto_init() }
func file_larking_api_test_proto_init() {
	if File_larking_api_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_larking_api_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageRequestOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageRequestTwo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMessageRequestOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scalars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shelf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShelfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMessageRequestTwo_SubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_larking_api_test_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexRequest_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_larking_api_test_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ComplexRequest_OneofDoubleValue)(nil),
		(*ComplexRequest_OneofFloatValue)(nil),
		(*ComplexRequest_OneofInt32Value)(nil),
		(*ComplexRequest_OneofInt64Value)(nil),
		(*ComplexRequest_OneofUint32Value)(nil),
		(*ComplexRequest_OneofUint64Value)(nil),
		(*ComplexRequest_OneofSint32Value)(nil),
		(*ComplexRequest_OneofSint64Value)(nil),
		(*ComplexRequest_OneofFixed32Value)(nil),
		(*ComplexRequest_OneofFixed64Value)(nil),
		(*ComplexRequest_OneofSfixed32Value)(nil),
		(*ComplexRequest_OneofSfixed64Value)(nil),
		(*ComplexRequest_OneofBoolValue)(nil),
		(*ComplexRequest_OneofStringValue)(nil),
		(*ComplexRequest_OneofBytesValue)(nil),
		(*ComplexRequest_OneofTimestamp)(nil),
		(*ComplexRequest_OneofDuration)(nil),
		(*ComplexRequest_OneofBoolValueWrapper)(nil),
		(*ComplexRequest_OneofInt32ValueWrapper)(nil),
		(*ComplexRequest_OneofInt64ValueWrapper)(nil),
		(*ComplexRequest_OneofUint32ValueWrapper)(nil),
		(*ComplexRequest_OneofUint64ValueWrapper)(nil),
		(*ComplexRequest_OneofFloatValueWrapper)(nil),
		(*ComplexRequest_OneofDoubleValueWrapper)(nil),
		(*ComplexRequest_OneofBytesValueWrapper)(nil),
		(*ComplexRequest_OneofStringValueWrapper)(nil),
		(*ComplexRequest_OneofFieldMask)(nil),
		(*ComplexRequest_OneofStruct)(nil),
		(*ComplexRequest_OneofAny)(nil),
		(*ComplexRequest_OneofValue)(nil),
		(*ComplexRequest_OneofListValue)(nil),
		(*ComplexRequest_OneofNullValue)(nil),
		(*ComplexRequest_OneofEmpty)(nil),
		(*ComplexRequest_OneofNested)(nil),
		(*ComplexRequest_OneofEnumValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_larking_api_test_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_larking_api_test_proto_goTypes,
		DependencyIndexes: file_larking_api_test_proto_depIdxs,
		EnumInfos:         file_larking_api_test_proto_enumTypes,
		MessageInfos:      file_larking_api_test_proto_msgTypes,
	}.Build()
	File_larking_api_test_proto = out.File
	file_larking_api_test_proto_rawDesc = nil
	file_larking_api_test_proto_goTypes = nil
	file_larking_api_test_proto_depIdxs = nil
}
