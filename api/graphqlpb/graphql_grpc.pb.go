// Copyright 2021 Edward McFarlane. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: larking/api/graphql.proto

package graphqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GraphQL_Query_FullMethodName = "/larking.api.GraphQL/Query"
)

// GraphQLClient is the client API for GraphQL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphQLClient interface {
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type graphQLClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphQLClient(cc grpc.ClientConnInterface) GraphQLClient {
	return &graphQLClient{cc}
}

func (c *graphQLClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GraphQL_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphQLServer is the server API for GraphQL service.
// All implementations must embed UnimplementedGraphQLServer
// for forward compatibility
type GraphQLServer interface {
	Query(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGraphQLServer()
}

// UnimplementedGraphQLServer must be embedded to have forward compatible implementations.
type UnimplementedGraphQLServer struct {
}

func (UnimplementedGraphQLServer) Query(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedGraphQLServer) mustEmbedUnimplementedGraphQLServer() {}

// UnsafeGraphQLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphQLServer will
// result in compilation errors.
type UnsafeGraphQLServer interface {
	mustEmbedUnimplementedGraphQLServer()
}

func RegisterGraphQLServer(s grpc.ServiceRegistrar, srv GraphQLServer) {
	s.RegisterService(&GraphQL_ServiceDesc, srv)
}

func _GraphQL_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphQLServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphQL_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphQLServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphQL_ServiceDesc is the grpc.ServiceDesc for GraphQL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphQL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "larking.api.GraphQL",
	HandlerType: (*GraphQLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _GraphQL_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "larking/api/graphql.proto",
}
