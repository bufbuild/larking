// Copyright 2021 Edward McFarlane. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package larking.testpb;

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "larking.io/api/testpb;testpb";

service Messaging {
  // HTTP | gRPC
  // -----|-----
  // `GET /v1/messages/123456`  | `GetMessageOne(name: "messages/123456")`
  rpc GetMessageOne(GetMessageRequestOne) returns (Message) {
    option (google.api.http) = {
      get : "/v1/messages/{name=name/*}"
    };
  }

  // HTTP | gRPC
  // -----|-----
  // `GET /v1/messages/123456?revision=2&sub.subfield=foo` |
  // `GetMessage(message_id: "123456" revision: 2 sub: SubMessage(subfield:
  // "foo"))`
  // `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id:
  // "123456")`
  rpc GetMessageTwo(GetMessageRequestTwo) returns (Message) {
    option (google.api.http) = {
      get : "/v1/messages/{message_id}"
      additional_bindings {get : "/v1/users/{user_id}/messages"}
      additional_bindings {get : "/v1/users/{user_id}/messages/{message_id}"}
    };
  }

  // HTTP | gRPC
  // -----|-----
  // `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:
  // "123456" message { text: "Hi!" })`
  rpc UpdateMessage(UpdateMessageRequestOne) returns (Message) {
    option (google.api.http) = {
      patch : "/v1/messages/{message_id}"
      body : "message"
    };
  }

  // HTTP | gRPC
  // -----|-----
  // `PATCH /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id:
  // "123456" text: "Hi!")`
  rpc UpdateMessageBody(Message) returns (Message) {
    option (google.api.http) = {
      patch : "/v1/messages/{message_id}/body"
      body : "*"
    };
  }

  rpc Action(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/{text=action}:cancel"
      body : "*"
    };
  }

  rpc ActionSegment(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/{text=*}:clear"
      body : "*"
    };
  }

  rpc ActionResource(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/{text=actions/*}:fetch"
    };
  }

  rpc ActionSegments(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/{text=**}:watch"
      body : "*"
    };
  }

  rpc BatchGet(google.protobuf.Empty) returns (google.protobuf.Empty) {
    // The batch get method maps to HTTP GET verb.
    option (google.api.http) = {
      get : "/v3/events:batchGet"
    };
  }

  rpc VariableOne(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/{text}/one"
    };
  }
  rpc VariableTwo(Message) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/{text}/two"
    };
  }

  rpc GetShelf(GetShelfRequest) returns (Shelf) {
    option (google.api.http) = {
      get : "/v1/{name=shelves/*}"
    };
  };
  rpc GetBook(GetBookRequest) returns (Book) {
    option (google.api.http) = {
      get : "/v1/{name=shelves/*/books/*}"
    };
  };
  rpc CreateBook(CreateBookRequest) returns (Book) {
    option (google.api.http) = {
      post : "/v1/{parent=shelves/*}/books"
      body : "book"
    };
  };
  rpc UpdateBook(UpdateBookRequest) returns (Book) {
    // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
    // Resource is contained in the HTTP request body.
    option (google.api.http) = {
      // Note the URL template variable which captures the resource name of the
      // book to update.
      patch : "/v1/{book.name=shelves/*/books/*}"
      body : "book"
    };
  }
}

message Message {
  string message_id = 1;
  string text = 2; // The resource content
  string user_id = 3;
}
message GetMessageRequestOne {
  string name = 1; // Mapped to URL path
}
message GetMessageRequestTwo {
  message SubMessage { string subfield = 1; }
  string message_id = 1; // Mapped to URL path
  int64 revision = 2;    // Mapped to URL query parameter `revision`
  SubMessage sub = 3;    // Mapped to URL query parameter `sub.subfield`
  string user_id = 4;    // Additional binding
}
message UpdateMessageRequestOne {
  string message_id = 1; // Mapped to the URL
  Message message = 2;   // Mapped to the body
}

service Files {
  // HTTP | gRPC
  // -----|-----
  // `POST /files/cat.jpg <body>` | `UploadDownload(filename: "cat.jpg", file:
  // { content_type: "image/jpeg", data: <body>})"`
  rpc UploadDownload(UploadFileRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      post : "/files/{filename}"
      body : "file"
    };
  }
  rpc LargeUploadDownload(stream UploadFileRequest)
      returns (stream google.api.HttpBody) {
    option (google.api.http) = {
      post : "/files/large/{filename}"
      body : "file"
    };
  }
}
message UploadFileRequest {
  string filename = 1;
  google.api.HttpBody file = 2;
}

// Valid a-z A-Z 0-9 . - _ ~ ! $ & ' ( ) * + , ; = : @
service WellKnown {
  // HTTP | gRPC
  // -----|-----
  // `GET /v1/wellknown/timestamp/2017-01-15T01:30:15.01Z` |
  // `Check(Timestamp{...})`
  rpc Check(Scalars) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/wellknown"
    };
  }
}

message Scalars {
  google.protobuf.Timestamp timestamp = 1;
  google.protobuf.Duration duration = 2;
  google.protobuf.BoolValue bool_value = 3;
  google.protobuf.Int32Value int32_value = 4;
  google.protobuf.Int64Value int64_value = 5;
  google.protobuf.UInt32Value uint32_value = 6;
  google.protobuf.UInt64Value uint64_value = 7;
  google.protobuf.FloatValue float_value = 8;
  google.protobuf.DoubleValue double_value = 9;
  google.protobuf.BytesValue bytes_value = 10;
  google.protobuf.StringValue string_value = 11;
  google.protobuf.FieldMask field_mask = 12;
}

service Complex {
  rpc Check(ComplexRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get : "/v1/complex"
      additional_bindings {get : "/v1/complex/{double_value}/star/*"}
      additional_bindings {get : "/v1/complex/{double_value}/starstar/**"}
    };
  }
}

message ComplexRequest {
  double double_value = 1;
  float float_value = 2;
  int32 int32_value = 3;
  int64 int64_value = 4;
  uint32 uint32_value = 5;
  uint64 uint64_value = 6;
  sint32 sint32_value = 7;
  sint64 sint64_value = 8;
  fixed32 fixed32_value = 9;
  fixed64 fixed64_value = 10;
  sfixed32 sfixed32_value = 11;
  sfixed64 sfixed64_value = 12;
  bool bool_value = 13;
  string string_value = 14;
  bytes bytes_value = 15;

  repeated double double_list = 16;
  repeated float float_list = 17;
  repeated int32 int32_list = 18;
  repeated int64 int64_list = 19;
  repeated uint32 uint32_list = 20;
  repeated uint64 uint64_list = 21;
  repeated sint32 sint32_list = 22;
  repeated sint64 sint64_list = 23;
  repeated fixed32 fixed32_list = 24;
  repeated fixed64 fixed64_list = 25;
  repeated sfixed32 sfixed32_list = 26;
  repeated sfixed64 sfixed64_list = 27;
  repeated bool bool_list = 28;
  repeated string string_list = 29;
  repeated bytes bytes_list = 30;

  map<string, double> double_map = 31;
  map<string, float> float_map = 32;
  map<int32, int32> int32_map = 33;
  map<int64, int64> int64_map = 34;
  map<uint32, uint32> uint32_map = 35;
  map<uint64, uint64> uint64_map = 36;
  map<sint32, sint32> sint32_map = 37;
  map<sint64, sint64> sint64_map = 38;
  map<fixed32, fixed32> fixed32_map = 39;
  map<fixed64, fixed64> fixed64_map = 40;
  map<sfixed32, sfixed32> sfixed32_map = 41;
  map<sfixed64, sfixed64> sfixed64_map = 42;
  map<bool, bool> bool_map = 43;
  map<string, string> string_map = 44;
  map<string, bytes> bytes_map = 45;

  google.protobuf.Timestamp timestamp = 46;
  google.protobuf.Duration duration = 47;
  google.protobuf.BoolValue bool_value_wrapper = 48;
  google.protobuf.Int32Value int32_value_wrapper = 49;
  google.protobuf.Int64Value int64_value_wrapper = 50;
  google.protobuf.UInt32Value uint32_value_wrapper = 51;
  google.protobuf.UInt64Value uint64_value_wrapper = 52;
  google.protobuf.FloatValue float_value_wrapper = 53;
  google.protobuf.DoubleValue double_value_wrapper = 54;
  google.protobuf.BytesValue bytes_value_wrapper = 55;
  google.protobuf.StringValue string_value_wrapper = 56;
  google.protobuf.FieldMask field_mask = 57;
  google.protobuf.Struct struct = 58;
  google.protobuf.Any any = 59;
  google.protobuf.Value value = 60;
  google.protobuf.ListValue list_value = 61;
  google.protobuf.NullValue null_value = 62;
  google.protobuf.Empty empty = 63;

  message Nested {
    double double_value = 1;
    float float_value = 2;
    int32 int32_value = 3;
    int64 int64_value = 4;
    uint32 uint32_value = 5;
    uint64 uint64_value = 6;
    sint32 sint32_value = 7;
    sint64 sint64_value = 8;
    fixed32 fixed32_value = 9;
    fixed64 fixed64_value = 10;
    sfixed32 sfixed32_value = 11;
    sfixed64 sfixed64_value = 12;
    bool bool_value = 13;
    string string_value = 14;
    bytes bytes_value = 15;

    enum Enum {
      ENUM_UNSPECIFIED = 0;
      ENUM_VALUE = 1;
    }
    Enum enum_value = 16;
  }
  Nested nested = 64;
  repeated Nested nested_list = 65;
  map<string, Nested> nested_map = 66;

  enum Enum {
    ENUM_UNSPECIFIED = 0;
    ENUM_VALUE = 1;
  }
  Enum enum_value = 67;
  repeated Enum enum_list = 68;
  map<string, Enum> enum_map = 69;

  oneof oneof {
    double oneof_double_value = 70;
    float oneof_float_value = 71;
    int32 oneof_int32_value = 72;
    int64 oneof_int64_value = 73;
    uint32 oneof_uint32_value = 74;
    uint64 oneof_uint64_value = 75;
    sint32 oneof_sint32_value = 76;
    sint64 oneof_sint64_value = 77;
    fixed32 oneof_fixed32_value = 78;
    fixed64 oneof_fixed64_value = 79;
    sfixed32 oneof_sfixed32_value = 80;
    sfixed64 oneof_sfixed64_value = 81;
    bool oneof_bool_value = 82;
    string oneof_string_value = 83;
    bytes oneof_bytes_value = 84;
    google.protobuf.Timestamp oneof_timestamp = 85;
    google.protobuf.Duration oneof_duration = 86;
    google.protobuf.BoolValue oneof_bool_value_wrapper = 87;
    google.protobuf.Int32Value oneof_int32_value_wrapper = 88;
    google.protobuf.Int64Value oneof_int64_value_wrapper = 89;
    google.protobuf.UInt32Value oneof_uint32_value_wrapper = 90;
    google.protobuf.UInt64Value oneof_uint64_value_wrapper = 91;
    google.protobuf.FloatValue oneof_float_value_wrapper = 92;
    google.protobuf.DoubleValue oneof_double_value_wrapper = 93;
    google.protobuf.BytesValue oneof_bytes_value_wrapper = 94;
    google.protobuf.StringValue oneof_string_value_wrapper = 95;
    google.protobuf.FieldMask oneof_field_mask = 96;
    google.protobuf.Struct oneof_struct = 97;
    google.protobuf.Any oneof_any = 98;
    google.protobuf.Value oneof_value = 99;
    google.protobuf.ListValue oneof_list_value = 100;
    google.protobuf.NullValue oneof_null_value = 101;
    google.protobuf.Empty oneof_empty = 102;
    Nested oneof_nested = 103;
    Enum oneof_enum_value = 104;
  }
}

message Shelf {
  // Resource name of the shelf. It must have the format of "shelves/*".
  // For example: "shelves/shelf1".
  string name = 1;
}

message GetShelfRequest {
  // Resource name of a shelf. For example: "shelves/shelf1".
  string name = 1;
}

message Book {
  // Resource name of the book. It must have the format of "shelves/*/books/*".
  // For example: "shelves/shelf1/books/book2".
  string name = 1;

  // ... other properties
  string title = 2;
}

message GetBookRequest {
  // Resource name of a book. For example: "shelves/shelf1/books/book2".
  string name = 1;
}

message CreateBookRequest {
  // Resource name of the parent resource where to create the book.
  // For example: "shelves/shelf1".
  string parent = 1;
  // The Book resource to be created. Client must not set the `Book.name` field.
  Book book = 2;
}

message UpdateBookRequest {
  // The book resource which replaces the resource on the server.
  Book book = 1;

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see
  // https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

message ChatMessage {
  string name = 1;
  string text = 2;
}

// Chatroom shows the websocket extension.
service ChatRoom {
  rpc Chat(stream ChatMessage) returns (stream ChatMessage) {
    option (google.api.http) = {
      custom : {kind : "websocket" path : "/v1/{name=rooms/*}"}
      body : "*"
    };
  }
}

// service Broken {
//   rpc Invalid(Message) returns (google.protobuf.Empty) {
//     option (google.api.http) = {
//       post : "/v1/{unknown=*}"
//       body : "*"
//     };
//   }
// }
