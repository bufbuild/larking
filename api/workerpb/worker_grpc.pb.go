// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/worker.proto

package workerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	RunOnThread(ctx context.Context, opts ...grpc.CallOption) (Worker_RunOnThreadClient, error)
	RunThread(ctx context.Context, in *RunThreadRequest, opts ...grpc.CallOption) (*Output, error)
	TestThread(ctx context.Context, in *TestThreadRequest, opts ...grpc.CallOption) (*Output, error)
	// Execution API
	//
	// rpc Execute(ExecuteActionRequest) returns (stream
	// google.longrunning.Operation) {
	ExecuteAction(ctx context.Context, in *ExecuteActionRequest, opts ...grpc.CallOption) (*ExecuteActionResponse, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) RunOnThread(ctx context.Context, opts ...grpc.CallOption) (Worker_RunOnThreadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/larking.api.Worker/RunOnThread", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerRunOnThreadClient{stream}
	return x, nil
}

type Worker_RunOnThreadClient interface {
	Send(*Command) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type workerRunOnThreadClient struct {
	grpc.ClientStream
}

func (x *workerRunOnThreadClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerRunOnThreadClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) RunThread(ctx context.Context, in *RunThreadRequest, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/larking.api.Worker/RunThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) TestThread(ctx context.Context, in *TestThreadRequest, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/larking.api.Worker/TestThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ExecuteAction(ctx context.Context, in *ExecuteActionRequest, opts ...grpc.CallOption) (*ExecuteActionResponse, error) {
	out := new(ExecuteActionResponse)
	err := c.cc.Invoke(ctx, "/larking.api.Worker/ExecuteAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	RunOnThread(Worker_RunOnThreadServer) error
	RunThread(context.Context, *RunThreadRequest) (*Output, error)
	TestThread(context.Context, *TestThreadRequest) (*Output, error)
	// Execution API
	//
	// rpc Execute(ExecuteActionRequest) returns (stream
	// google.longrunning.Operation) {
	ExecuteAction(context.Context, *ExecuteActionRequest) (*ExecuteActionResponse, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) RunOnThread(Worker_RunOnThreadServer) error {
	return status.Errorf(codes.Unimplemented, "method RunOnThread not implemented")
}
func (UnimplementedWorkerServer) RunThread(context.Context, *RunThreadRequest) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunThread not implemented")
}
func (UnimplementedWorkerServer) TestThread(context.Context, *TestThreadRequest) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestThread not implemented")
}
func (UnimplementedWorkerServer) ExecuteAction(context.Context, *ExecuteActionRequest) (*ExecuteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_RunOnThread_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).RunOnThread(&workerRunOnThreadServer{stream})
}

type Worker_RunOnThreadServer interface {
	Send(*Result) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type workerRunOnThreadServer struct {
	grpc.ServerStream
}

func (x *workerRunOnThreadServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerRunOnThreadServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_RunThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).RunThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/larking.api.Worker/RunThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).RunThread(ctx, req.(*RunThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_TestThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).TestThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/larking.api.Worker/TestThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).TestThread(ctx, req.(*TestThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/larking.api.Worker/ExecuteAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ExecuteAction(ctx, req.(*ExecuteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "larking.api.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunThread",
			Handler:    _Worker_RunThread_Handler,
		},
		{
			MethodName: "TestThread",
			Handler:    _Worker_TestThread_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _Worker_ExecuteAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunOnThread",
			Handler:       _Worker_RunOnThread_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/worker.proto",
}
