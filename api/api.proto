// Copyright 2021 Edward McFarlane. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package larking.api;

import "google/api/annotations.proto";

option go_package = "github.com/emcfarlane/larking/api;api";

message Command {
  string name = 1;
  oneof exec {
    string input = 2;
    string complete = 3;
  }
}

message Output {
  string input = 1;  // formatted input
  string output = 2; // printed output
}

message Completion {
  repeated string completions = 3; // completions
}

message Result {
  oneof result {
    Output output = 1;
    Completion completion = 2;
  }
}

message Thread { string name = 1; }

message ListThreadsRequest {
  int32 page_size = 2;
  string page_token = 3;
}

message ListThreadsResponse {
  repeated Thread threads = 1;
  string next_page_token = 2;
}

service Larking {
  rpc RunOnThread(stream Command) returns (stream Result) {
    option (google.api.http) = {
      custom : {kind : "websocket" path : "/v1/{name=threads/*}:run"}
      body : "*"
    };
  }
  rpc ListThreads(ListThreadsRequest) returns (ListThreadsResponse) {
    option (google.api.http) = {
      get : "/v1/threads"
    };
  };

  // rpc GetThread(GetThreadRequest) returns (Thread) {
  //  option (google.api.http) = {
  //    get : "/v1/{name=threads/*}"
  //  };
  //};
  // rpc CreateThread(CreateThreadRequest) returns (Thread) {
  //  option (google.api.http) = {
  //    post : "/v1/threads"
  //    body : "thread"
  //  };
  //};
}
