// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LarkingClient is the client API for Larking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LarkingClient interface {
	RunOnThread(ctx context.Context, opts ...grpc.CallOption) (Larking_RunOnThreadClient, error)
	ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error)
}

type larkingClient struct {
	cc grpc.ClientConnInterface
}

func NewLarkingClient(cc grpc.ClientConnInterface) LarkingClient {
	return &larkingClient{cc}
}

func (c *larkingClient) RunOnThread(ctx context.Context, opts ...grpc.CallOption) (Larking_RunOnThreadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Larking_ServiceDesc.Streams[0], "/larking.api.Larking/RunOnThread", opts...)
	if err != nil {
		return nil, err
	}
	x := &larkingRunOnThreadClient{stream}
	return x, nil
}

type Larking_RunOnThreadClient interface {
	Send(*Command) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type larkingRunOnThreadClient struct {
	grpc.ClientStream
}

func (x *larkingRunOnThreadClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *larkingRunOnThreadClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *larkingClient) ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error) {
	out := new(ListThreadsResponse)
	err := c.cc.Invoke(ctx, "/larking.api.Larking/ListThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LarkingServer is the server API for Larking service.
// All implementations must embed UnimplementedLarkingServer
// for forward compatibility
type LarkingServer interface {
	RunOnThread(Larking_RunOnThreadServer) error
	ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsResponse, error)
	mustEmbedUnimplementedLarkingServer()
}

// UnimplementedLarkingServer must be embedded to have forward compatible implementations.
type UnimplementedLarkingServer struct {
}

func (UnimplementedLarkingServer) RunOnThread(Larking_RunOnThreadServer) error {
	return status.Errorf(codes.Unimplemented, "method RunOnThread not implemented")
}
func (UnimplementedLarkingServer) ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThreads not implemented")
}
func (UnimplementedLarkingServer) mustEmbedUnimplementedLarkingServer() {}

// UnsafeLarkingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LarkingServer will
// result in compilation errors.
type UnsafeLarkingServer interface {
	mustEmbedUnimplementedLarkingServer()
}

func RegisterLarkingServer(s grpc.ServiceRegistrar, srv LarkingServer) {
	s.RegisterService(&Larking_ServiceDesc, srv)
}

func _Larking_RunOnThread_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LarkingServer).RunOnThread(&larkingRunOnThreadServer{stream})
}

type Larking_RunOnThreadServer interface {
	Send(*Result) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type larkingRunOnThreadServer struct {
	grpc.ServerStream
}

func (x *larkingRunOnThreadServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *larkingRunOnThreadServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Larking_ListThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LarkingServer).ListThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/larking.api.Larking/ListThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LarkingServer).ListThreads(ctx, req.(*ListThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Larking_ServiceDesc is the grpc.ServiceDesc for Larking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Larking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "larking.api.Larking",
	HandlerType: (*LarkingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListThreads",
			Handler:    _Larking_ListThreads_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunOnThread",
			Handler:       _Larking_RunOnThread_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
